


Sub StratifyData(ws As Worksheet, colDict As Object, fieldCode As String, OutputSheetName As String, TableTitle As String, StratificationMode As String, Optional FieldInfo As CFieldValidationInfo)
    ' Existing code for stratifying data...

    ' Additional code: Call the chart creation subroutine at the end
    CreateChartForStratifiedData OutputSheetName, fieldCode, BucketDict
End Sub

Sub CreateChartForStratifiedData(OutputSheetName As String, fieldCode As String, BucketDict As Object)
    Dim outputWs As Worksheet
    Set outputWs = ThisWorkbook.Sheets(OutputSheetName)
    Dim chartObj As ChartObject
    Dim bucketKey As Variant
    Dim i As Integer

    ' Prepare arrays for chart data
    Dim bucketLabels() As String
    Dim percentageData() As Double
    ReDim bucketLabels(0 To BucketDict.Count - 1)
    ReDim percentageData(0 To BucketDict.Count - 1)
    
    i = 0
    For Each bucketKey In BucketDict.Keys
        bucketLabels(i) = bucketKey
        percentageData(i) = CalculatePercentage(BucketDict.Item(bucketKey))
        i = i + 1
    Next bucketKey

    ' Create a chart
    Set chartObj = outputWs.ChartObjects.Add(Left:=100, Width:=375, Top:=50, Height:=225)
    With chartObj.Chart
        .ChartType = xlColumnClustered
        .SeriesCollection.NewSeries
        .SeriesCollection(1).Values = percentageData
        .SeriesCollection(1).XValues = bucketLabels
        .HasTitle = True
        .ChartTitle.Text = "Distribution for " & fieldCode
        ' Additional formatting as needed
    End With
End Sub

Function CalculatePercentage(bucketItems As Collection) As Double
    ' This function calculates the percentage based on your existing logic
    ' Assuming the second element in each item of the collection is the balance
    Dim totalBalance As Double
    totalBalance = 0
    Dim item As Variant
    For Each item In bucketItems
        totalBalance = totalBalance + item(1) ' The balance part of the item
    Next item
    CalculatePercentage = totalBalance / totalbalance * 100 ' totalbalance should be the global total balance
End Function

Sub OutputBuckets(sourceWs As Worksheet, BucketDict As Object, OutputSheetName As String, TableTitle As String)
    Dim outputWs As Worksheet
    Set outputWs = ThisWorkbook.Sheets(OutputSheetName)
    ' ... existing code to output data ...

    ' Arrays to store data for charting
    Dim bucketLabels() As String
    Dim percentageData() As Double
    ReDim bucketLabels(0 To BucketDict.Count - 1)
    ReDim percentageData(0 To BucketDict.Count - 1)

    Dim i As Integer
    i = 0
    Dim BucketKey As Variant
    For Each BucketKey In BucketDict.Keys
        bucketLabels(i) = BucketKey
        percentageData(i) = CalculatePercentage(BucketDict.Item(BucketKey))
        i = i + 1
    Next BucketKey

    ' Create a chart
    CreateChart outputWs, bucketLabels, percentageData, TableTitle
End Sub

Function CalculatePercentage(bucketItems As Collection) As Double
    ' ... existing code to calculate percentage ...
End Function

Sub CreateChart(outputWs As Worksheet, bucketLabels() As String, percentageData() As Double, chartTitle As String)
    Dim chartObj As ChartObject
    Set chartObj = outputWs.ChartObjects.Add(Left:=100, Width:=375, Top:=50, Height:=225)
    With chartObj.Chart
        .ChartType = xlColumnClustered
        .SeriesCollection.NewSeries
        .SeriesCollection(1).Values = percentageData
        .SeriesCollection(1).XValues = bucketLabels
        .HasTitle = True
        .ChartTitle.Text = chartTitle
        ' Additional formatting as needed
    End With
End Sub

Sub OutputBuckets(sourceWs As Worksheet, BucketDict As Object, OutputSheetName As String, TableTitle As String)
    Dim outputWs As Worksheet
    Set outputWs = ThisWorkbook.Sheets(OutputSheetName)

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    Dim outputArray() As Variant
    Dim i As Long
    Dim totalRows As Long
    totalRows = BucketDict.Count
    
    ' Resize the output array
    ReDim outputArray(1 To totalRows, 1 To 5)
    
    i = 1
    Dim BucketKey As Variant
    For Each BucketKey In BucketDict.Keys
        outputArray(i, 1) = BucketKey ' Bucket Range
        outputArray(i, 2) = SumBalanceFromBucket(BucketDict.Item(BucketKey))
        outputArray(i, 3) = outputArray(i, 2) / totalbalance * 100
        outputArray(i, 4) = BucketDict.Item(BucketKey).Count
        outputArray(i, 5) = outputArray(i, 4) / loanDict.Count * 100
        i = i + 1
    Next BucketKey

    ' Output the data in bulk
    Dim startRow As Long
    startRow = FindNextAvailableRow(outputWs)
    outputWs.Range(outputWs.Cells(startRow, 1), outputWs.Cells(startRow + totalRows - 1, 5)).Value = outputArray

    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Function SumBalanceFromBucket(bucketItems As Collection) As Double
    Dim totalBalance As Double
    totalBalance = 0
    Dim item As Variant
    For Each item In bucketItems
        totalBalance = totalBalance + item(1) ' Assuming second element is the balance
    Next item
    SumBalanceFromBucket = totalBalance
End Function

Function FindNextAvailableRow(ws As Worksheet) As Long
    ' Finds the first empty row in the worksheet
    FindNextAvailableRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row + 1
End Function

Sub OutputBuckets(sourceWs As Worksheet, BucketDict As Object, OutputSheetName As String, TableTitle As String)
    Dim outputWs As Worksheet
    Set outputWs = ThisWorkbook.Sheets(OutputSheetName)

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    Dim outputArray() As Variant
    Dim i As Long
    Dim totalRows As Long
    totalRows = BucketDict.Count
    
    ' Resize the output array
    ReDim outputArray(1 To totalRows + 1, 1 To 5) ' +1 for headers
    
    ' Set headers
    outputArray(1, 1) = "Bucket Range"
    outputArray(1, 2) = "Total Balance"
    outputArray(1, 3) = "% of Total Balance"
    outputArray(1, 4) = "Number of Loans"
    outputArray(1, 5) = "% of Total Loans"

    i = 2 ' Start from the second row to leave space for headers
    Dim BucketKey As Variant
    For Each BucketKey In BucketDict.Keys
        outputArray(i, 1) = BucketKey ' Bucket Range
        outputArray(i, 2) = SumBalanceFromBucket(BucketDict.Item(BucketKey))
        outputArray(i, 3) = outputArray(i, 2) / totalbalance * 100
        outputArray(i, 4) = BucketDict.Item(BucketKey).Count
        outputArray(i, 5) = outputArray(i, 4) / loanDict.Count * 100
        i = i + 1
    Next BucketKey

    ' Output the data in bulk
    Dim startRow As Long
    startRow = FindNextAvailableRow(outputWs)
    With outputWs
        .Range(.Cells(startRow, 1), .Cells(startRow + totalRows, 5)).Value = outputArray

        ' Apply formatting
        With .Range(.Cells(startRow, 1), .Cells(startRow + totalRows, 5))
            .Borders.Weight = xlThin
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeTop).LineStyle = xlContinuous
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
        End With

        ' Format as Table for better readability (optional)
        .ListObjects.Add(xlSrcRange, .Range(.Cells(startRow, 1), .Cells(startRow + totalRows, 5)), , xlYes).Name = "DataTable"
        .ListObjects("DataTable").TableStyle = "TableStyleLight9"
    End With

    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Function SumBalanceFromBucket(bucketItems As Collection) As Double
    ' ... existing code to calculate sum ...
End Function

Function FindNextAvailableRow(ws As Worksheet) As Long
    ' Finds the first empty row in the worksheet
    FindNextAvailableRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row + 1
End Function
