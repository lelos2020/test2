Public Sub StratifyData(ws As Worksheet, colDict As Object, fieldCode As String, OutputSheetName As String, TableTitle As String, StratificationMode As String, Optional FieldInfo As CFieldValidationInfo)

    Dim IsCalculatedField As Boolean
    Dim IsListField As Boolean
    Dim uniqueItems As Scripting.Dictionary
    Dim fieldValue As Variant
    Dim buckets() As Double
    Dim range As Double, stepInterval As Double
    Dim BucketDict As Object
    Dim totalBalance As Double, totalPreCompressionMargin As Double, totalPostCompressionMargin As Double
    Dim remainingReduction As Double, marginCompressionBps As Double
    Dim bucketKey As Variant, loanData As Variant
    Dim bucketBalance As Double, bucketMargin As Double
    Dim HYLoanPrepayPct As Double, CPR As Double
    Dim sortedKeys() As Variant, i As Long
    
    IsCalculatedField = (fieldCode = "Remaining Term" Or fieldCode = "Seasoning" Or fieldCode = "Year of Origination" Or fieldCode = "Time to Reversion")

    If FieldInfo.DataType = "List" Then
        Set uniqueItems = CreateObject("Scripting.Dictionary")
        IsListField = True
    End If

    ' Check if the field code is in the dictionary
    If Not IsCalculatedField And Not colDict.Exists(fieldCode) Then
        MsgBox "Field code " & fieldCode & " not found in the dataset."
        Exit Sub
    End If

    ' Get the column numbers
    Dim colnumber As Integer, colCurrentBalance As Integer, colMargin As Integer
    colnumber = colDict.item(fieldCode)
    colCurrentBalance = colDict.item("AR67")
    colMargin = colDict.item("AR109")

    ' Initialize variables and dictionary
    Set BucketDict = CreateObject("Scripting.Dictionary")
    totalBalance = 0
    totalPreCompressionMargin = 0
    totalPostCompressionMargin = 0
    HYLoanPrepayPct = ThisWorkbook.Sheets("Control").Cells(13, 12).Value ' High-yield prepay %
    CPR = ThisWorkbook.Sheets("Control").Cells(12, 12).Value ' CPR %

    ' Populate the BucketDict
    Dim currentBalance As Double, currentMargin As Double
    For r = startRow To lastRow
        If filter = True And ws.Rows(r).EntireRow.Hidden Then GoTo ContinueLoop

        currentBalance = ws.Cells(r, colCurrentBalance).Value
        currentMargin = ws.Cells(r, colMargin).Value
        fieldValue = ws.Cells(r, colnumber).Value
        
        Dim BucketKey As String
        BucketKey = GetBucketKey(fieldValue, buckets, StratificationMode, FieldInfo)

        If Not BucketDict.Exists(BucketKey) Then
            BucketDict.Add BucketKey, New Collection
        End If
        BucketDict(BucketKey).Add Array(currentBalance, currentMargin)

        ' Accumulate total balance and pre-compression margin
        totalBalance = totalBalance + currentBalance
        totalPreCompressionMargin = totalPreCompressionMargin + (currentMargin * currentBalance)

ContinueLoop:
    Next r

    ' Normalize pre-compression margin
    If totalBalance > 0 Then
        totalPreCompressionMargin = totalPreCompressionMargin / totalBalance
    End If

    ' Sort dictionary keys (assuming numerical order for buckets)
    sortedKeys = BucketDict.Keys
    Call SortDictionaryKeys(sortedKeys)

    ' Apply staggered margin compression (from highest bucket)
    remainingReduction = totalBalance * CPR * HYLoanPrepayPct
    For i = UBound(sortedKeys) To LBound(sortedKeys) Step -1
        bucketKey = sortedKeys(i)
        bucketBalance = 0
        bucketMargin = 0

        ' Aggregate bucket balance and margin
        For Each loanData In BucketDict(bucketKey)
            bucketBalance = bucketBalance + loanData(1)
            bucketMargin = bucketMargin + (loanData(2) * loanData(1))
        Next loanData

        ' Apply reduction
        If remainingReduction > 0 Then
            If bucketBalance <= remainingReduction Then
                ' Fully reduce the bucket
                remainingReduction = remainingReduction - bucketBalance
                bucketBalance = 0
            Else
                ' Partially reduce the bucket
                bucketBalance = bucketBalance - remainingReduction
                remainingReduction = 0
            End If
        End If

        ' Update post-compression margin
        For Each loanData In BucketDict(bucketKey)
            totalPostCompressionMargin = totalPostCompressionMargin + (loanData(2) * bucketBalance)
        Next loanData
    Next i

    ' Normalize post-compression margin
    If totalBalance > 0 Then
        totalPostCompressionMargin = totalPostCompressionMargin / totalBalance
    End If

    ' Calculate margin compression in bps
    marginCompressionBps = (totalPreCompressionMargin - totalPostCompressionMargin) * 10000

    ' Output margin compression to Control tab
    ThisWorkbook.Sheets("Control").Cells(15, 12).Value = "Margin Compression (bps)"
    ThisWorkbook.Sheets("Control").Cells(16, 12).Value = marginCompressionBps
    ThisWorkbook.Sheets("Control").Cells(16, 12).NumberFormat = "0.00"

    ' Optional: Call OutputBuckets or any other processing function
    Call OutputMod.OutputBuckets(ws, BucketDict, OutputSheetName, TableTitle)
End Sub

' Helper function to determine the bucket key
Private Function GetBucketKey(fieldValue As Variant, buckets() As Double, StratificationMode As String, FieldInfo As CFieldValidationInfo) As String
    Dim BucketKey As String, i As Long

    If StratificationMode = "Numerical" Then
        For i = LBound(buckets) To UBound(buckets) - 1
            If fieldValue >= buckets(i) And fieldValue < buckets(i + 1) Then
                BucketKey = buckets(i) & "-" & buckets(i + 1)
                Exit For
            End If
        Next i
        If fieldValue < buckets(LBound(buckets)) Then
            BucketKey = "<" & buckets(LBound(buckets))
        ElseIf fieldValue >= buckets(UBound(buckets)) Then
            BucketKey = ">" & buckets(UBound(buckets))
        End If
    ElseIf StratificationMode = "Categorical" Then
        BucketKey = CStr(fieldValue)
    End If
    GetBucketKey = BucketKey
End Function

' Helper function to sort dictionary keys
Private Sub SortDictionaryKeys(ByRef keys() As Variant)
    Dim i As Long, j As Long, temp As Variant
    For i = LBound(keys) To UBound(keys) - 1
        For j = i + 1 To UBound(keys)
            If keys(i) > keys(j) Then
                temp = keys(i)
                keys(i) = keys(j)
                keys(j) = temp
            End If
        Next j
    Next i
End Sub

v2 audit in new sheet

Public Sub StratifyData(ws As Worksheet, colDict As Object, fieldCode As String, OutputSheetName As String, TableTitle As String, StratificationMode As String, Optional FieldInfo As CFieldValidationInfo)

    Dim IsCalculatedField As Boolean
    Dim IsListField As Boolean
    Dim uniqueItems As Scripting.Dictionary
    Dim fieldValue As Variant
    Dim buckets() As Double
    Dim range As Double, stepInterval As Double
    Dim BucketDict As Object
    Dim totalBalance As Double, totalCompressedBalance As Double
    Dim remainingReduction As Double, totalPreCompression As Double, totalPostCompression As Double
    Dim BucketKey As Variant, loanData As Variant
    Dim bucketBalance As Double, bucketMargin As Double
    Dim sortedKeys() As Variant, i As Long
    Dim outputWs As Worksheet, rowCounter As Long

    ' Initialize variables
    Set BucketDict = CreateObject("Scripting.Dictionary")
    totalBalance = 0
    totalCompressedBalance = 0
    totalPreCompression = 0
    totalPostCompression = 0

    ' Retrieve compression parameters
    Dim HYLoanPrepayPct As Double, CPR As Double
    HYLoanPrepayPct = ThisWorkbook.Sheets("Control").Cells(13, 12).Value ' High-yield prepay %
    CPR = ThisWorkbook.Sheets("Control").Cells(12, 12).Value ' CPR %

    ' Retrieve column numbers
    Dim colnumber As Integer, colCurrentBalance As Integer, colMargin As Integer
    colnumber = colDict.Item(fieldCode)
    colCurrentBalance = colDict.Item("AR67")
    colMargin = colDict.Item("AR109")

    ' Step 1: Populate BucketDict with loan data
    For r = startRow To lastRow
        If filter = True And ws.Rows(r).EntireRow.Hidden Then GoTo ContinueLoop

        Dim currentBalance As Double, currentMargin As Double
        currentBalance = ws.Cells(r, colCurrentBalance).Value
        currentMargin = ws.Cells(r, colMargin).Value
        fieldValue = ws.Cells(r, colnumber).Value

        ' Determine the bucket key
        BucketKey = GetBucketKey(fieldValue, buckets, StratificationMode, FieldInfo)

        ' Ensure the bucket exists in the dictionary
        If Not BucketDict.Exists(BucketKey) Then
            Set BucketDict(BucketKey) = New Collection
        End If

        ' Add loan data to the bucket
        BucketDict(BucketKey).Add Array(currentBalance, currentMargin)

        ' Accumulate total balance
        totalBalance = totalBalance + currentBalance
        totalPreCompression = totalPreCompression + (currentMargin * currentBalance)

ContinueLoop:
    Next r

    ' Step 2: Apply compression from the highest bucket
    remainingReduction = totalBalance * CPR * HYLoanPrepayPct
    sortedKeys = BucketDict.Keys
    Call SortDictionaryKeys(sortedKeys)

    For i = UBound(sortedKeys) To LBound(sortedKeys) Step -1
        BucketKey = sortedKeys(i)
        bucketBalance = 0
        bucketMargin = 0

        ' Aggregate bucket balance and margin
        For Each loanData In BucketDict(BucketKey)
            bucketBalance = bucketBalance + loanData(0) ' currentBalance
            bucketMargin = bucketMargin + (loanData(1) * loanData(0)) ' currentMargin * currentBalance
        Next loanData

        ' Apply reduction
        If remainingReduction > 0 Then
            If bucketBalance <= remainingReduction Then
                ' Fully reduce the bucket
                remainingReduction = remainingReduction - bucketBalance
                bucketBalance = 0
            Else
                ' Partially reduce the bucket
                bucketBalance = bucketBalance - remainingReduction
                remainingReduction = 0
            End If
        End If

        ' Update post-compression totals
        totalCompressedBalance = totalCompressedBalance + bucketBalance
        totalPostCompression = totalPostCompression + (bucketMargin / bucketBalance) * bucketBalance
    Next i

    ' Normalize pre- and post-compression margins
    If totalBalance > 0 Then
        totalPreCompression = totalPreCompression / totalBalance
    End If
    If totalCompressedBalance > 0 Then
        totalPostCompression = totalPostCompression / totalCompressedBalance
    End If

    ' Step 3: Output the results to a new worksheet
    On Error Resume Next
    Application.DisplayAlerts = False
    Set outputWs = ThisWorkbook.Sheets("Compression Results")
    If Not outputWs Is Nothing Then outputWs.Delete
    Application.DisplayAlerts = True
    On Error GoTo 0

    Set outputWs = ThisWorkbook.Sheets.Add
    outputWs.Name = "Compression Results"

    ' Write headers
    rowCounter = 1
    outputWs.Cells(rowCounter, 1).Value = "Bucket"
    outputWs.Cells(rowCounter, 2).Value = "Pre-Compression Balance"
    outputWs.Cells(rowCounter, 3).Value = "Post-Compression Balance"
    outputWs.Cells(rowCounter, 4).Value = "% of Total Pool (Post-Compression)"
    rowCounter = rowCounter + 1

    ' Write bucket data
    For i = LBound(sortedKeys) To UBound(sortedKeys)
        BucketKey = sortedKeys(i)
        bucketBalance = 0

        ' Calculate balance for the bucket
        For Each loanData In BucketDict(BucketKey)
            bucketBalance = bucketBalance + loanData(0)
        Next loanData

        ' Output the results
        outputWs.Cells(rowCounter, 1).Value = BucketKey
        outputWs.Cells(rowCounter, 2).Value = bucketBalance
        If totalCompressedBalance > 0 Then
            outputWs.Cells(rowCounter, 3).Value = bucketBalance
            outputWs.Cells(rowCounter, 4).Value = bucketBalance / totalCompressedBalance
        End If
        rowCounter = rowCounter + 1
    Next i

    ' Write summary
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Pre-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Post-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalCompressedBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Margin Compression (bps)"
    outputWs.Cells(rowCounter, 2).Value = (totalPreCompression - totalPostCompression) * 10000

    ' Format output
    outputWs.Columns("A:D").AutoFit
    outputWs.Range("A1:D1").Font.Bold = True
    outputWs.Range("A1:D1").Interior.Color = RGB(211, 211, 211)

End Sub

v3-----
Public Sub StratifyData(ws As Worksheet, colDict As Object, fieldCode As String, OutputSheetName As String, TableTitle As String, StratificationMode As String, Optional FieldInfo As CFieldValidationInfo)

    Dim BucketDict As Object
    Dim totalBalance As Double, totalCompressedBalance As Double
    Dim remainingReduction As Double, totalPreCompression As Double, totalPostCompression As Double
    Dim BucketKey As Variant, loanData As Variant
    Dim bucketBalance As Double, bucketMargin As Double
    Dim sortedKeys() As Variant, i As Long
    Dim outputWs As Worksheet, rowCounter As Long
    Dim buckets() As Double
    Dim lowerBound As Double, upperBound As Double

    ' Initialize BucketDict and totals
    Set BucketDict = CreateObject("Scripting.Dictionary")
    totalBalance = 0
    totalCompressedBalance = 0
    totalPreCompression = 0
    totalPostCompression = 0

    ' Retrieve compression parameters
    Dim HYLoanPrepayPct As Double, CPR As Double
    HYLoanPrepayPct = ThisWorkbook.Sheets("Control").Cells(13, 12).Value ' High-yield prepay %
    CPR = ThisWorkbook.Sheets("Control").Cells(12, 12).Value ' CPR %

    ' Retrieve column numbers
    Dim colnumber As Integer, colCurrentBalance As Integer, colMargin As Integer
    colnumber = colDict.Item(fieldCode)
    colCurrentBalance = colDict.Item("AR67")
    colMargin = colDict.Item("AR109")

    ' Step 1: Populate BucketDict with loan data
    For r = startRow To lastRow
        If filter = True And ws.Rows(r).EntireRow.Hidden Then GoTo ContinueLoop

        Dim currentBalance As Double, currentMargin As Double, fieldValue As Double
        currentBalance = ws.Cells(r, colCurrentBalance).Value
        currentMargin = ws.Cells(r, colMargin).Value
        fieldValue = ws.Cells(r, colnumber).Value

        ' Determine bucket bounds (interest rate range)
        BucketKey = GetBucketKey(fieldValue, buckets, StratificationMode, FieldInfo, lowerBound, upperBound)

        ' Ensure the bucket exists in the dictionary
        If Not BucketDict.Exists(BucketKey) Then
            Set BucketDict(BucketKey) = CreateObject("Scripting.Dictionary")
            BucketDict(BucketKey).Add "LowerBound", lowerBound
            BucketDict(BucketKey).Add "UpperBound", upperBound
            BucketDict(BucketKey).Add "PreBalance", 0
            BucketDict(BucketKey).Add "PostBalance", 0
            BucketDict(BucketKey).Add "MarginTotal", 0
        End If

        ' Update bucket data
        BucketDict(BucketKey)("PreBalance") = BucketDict(BucketKey)("PreBalance") + currentBalance
        BucketDict(BucketKey)("MarginTotal") = BucketDict(BucketKey)("MarginTotal") + (currentBalance * currentMargin)

        ' Accumulate total balance
        totalBalance = totalBalance + currentBalance
        totalPreCompression = totalPreCompression + (currentMargin * currentBalance)

ContinueLoop:
    Next r

    ' Step 2: Apply compression starting from the highest bucket
    remainingReduction = totalBalance * CPR * HYLoanPrepayPct
    sortedKeys = BucketDict.Keys
    Call SortDictionaryKeysByMargin(sortedKeys, BucketDict)

    For i = UBound(sortedKeys) To LBound(sortedKeys) Step -1
        BucketKey = sortedKeys(i)

        ' Get pre-compression balance
        bucketBalance = BucketDict(BucketKey)("PreBalance")

        ' Apply reduction
        If remainingReduction > 0 Then
            If bucketBalance <= remainingReduction Then
                ' Fully reduce the bucket
                remainingReduction = remainingReduction - bucketBalance
                BucketDict(BucketKey)("PostBalance") = 0
            Else
                ' Partially reduce the bucket
                BucketDict(BucketKey)("PostBalance") = bucketBalance - remainingReduction
                remainingReduction = 0
            End If
        Else
            ' No reduction needed
            BucketDict(BucketKey)("PostBalance") = bucketBalance
        End If

        ' Accumulate total post-compression balance
        totalCompressedBalance = totalCompressedBalance + BucketDict(BucketKey)("PostBalance")
        If BucketDict(BucketKey)("PostBalance") > 0 Then
            totalPostCompression = totalPostCompression + BucketDict(BucketKey)("MarginTotal")
        End If
    Next i

    ' Normalize pre- and post-compression margins
    If totalBalance > 0 Then
        totalPreCompression = totalPreCompression / totalBalance
    End If
    If totalCompressedBalance > 0 Then
        totalPostCompression = totalPostCompression / totalCompressedBalance
    Else
        totalPostCompression = 0
    End If

    ' Step 3: Output the results to a new worksheet
    On Error Resume Next
    Application.DisplayAlerts = False
    Set outputWs = ThisWorkbook.Sheets("Compression Results")
    If Not outputWs Is Nothing Then outputWs.Delete
    Application.DisplayAlerts = True
    On Error GoTo 0

    Set outputWs = ThisWorkbook.Sheets.Add
    outputWs.Name = "Compression Results"

    ' Write headers
    rowCounter = 1
    outputWs.Cells(rowCounter, 1).Value = "Bucket (Rate Range)"
    outputWs.Cells(rowCounter, 2).Value = "Pre-Compression Balance"
    outputWs.Cells(rowCounter, 3).Value = "Post-Compression Balance"
    outputWs.Cells(rowCounter, 4).Value = "% of Total Pool (Post-Compression)"
    rowCounter = rowCounter + 1

    ' Write bucket data
    For Each BucketKey In sortedKeys
        With BucketDict(BucketKey)
            outputWs.Cells(rowCounter, 1).Value = .Item("LowerBound") & "% - " & .Item("UpperBound") & "%"
            outputWs.Cells(rowCounter, 2).Value = .Item("PreBalance")
            outputWs.Cells(rowCounter, 3).Value = .Item("PostBalance")
            If totalCompressedBalance > 0 Then
                outputWs.Cells(rowCounter, 4).Value = .Item("PostBalance") / totalCompressedBalance
            End If
        End With
        rowCounter = rowCounter + 1
    Next BucketKey

    ' Write summary
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Pre-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Post-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalCompressedBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Margin Compression (bps)"
    outputWs.Cells(rowCounter, 2).Value = (totalPreCompression - totalPostCompression) * 10000

    ' Format output
    outputWs.Columns("A:D").AutoFit
    outputWs.Range("A1:D1").Font.Bold = True
    outputWs.Range("A1:D1").Interior.Color = RGB(211, 211, 211)

End Sub

-------v4
Public Sub StratifyData(ws As Worksheet, colDict As Object, fieldCode As String, OutputSheetName As String, TableTitle As String, StratificationMode As String, Optional FieldInfo As CFieldValidationInfo)

    Dim BucketDict As Object
    Dim totalBalance As Double, totalCompressedBalance As Double
    Dim remainingReduction As Double, totalPreCompression As Double, totalPostCompression As Double
    Dim BucketKey As Variant, bucketBalance As Double, bucketMargin As Double
    Dim sortedKeys() As Variant, i As Long
    Dim outputWs As Worksheet, rowCounter As Long

    ' Initialize the BucketDict and totals
    Set BucketDict = CreateObject("Scripting.Dictionary")
    totalBalance = 0
    totalCompressedBalance = 0
    totalPreCompression = 0
    totalPostCompression = 0

    ' Retrieve compression parameters
    Dim HYLoanPrepayPct As Double, CPR As Double
    HYLoanPrepayPct = ThisWorkbook.Sheets("Control").Cells(13, 12).Value ' High-yield prepay %
    CPR = ThisWorkbook.Sheets("Control").Cells(12, 12).Value ' CPR %

    ' Retrieve column numbers
    Dim colnumber As Integer, colCurrentBalance As Integer, colMargin As Integer
    colnumber = colDict.Item(fieldCode)
    colCurrentBalance = colDict.Item("AR67")
    colMargin = colDict.Item("AR109")

    ' Step 1: Populate BucketDict with loan data
    For r = startRow To lastRow
        If filter = True And ws.Rows(r).EntireRow.Hidden Then GoTo ContinueLoop

        Dim currentBalance As Double, currentMargin As Double, fieldValue As Double
        currentBalance = ws.Cells(r, colCurrentBalance).Value
        currentMargin = ws.Cells(r, colMargin).Value
        fieldValue = ws.Cells(r, colnumber).Value

        ' Use the fieldValue as the key for buckets
        If Not BucketDict.Exists(fieldValue) Then
            Set BucketDict(fieldValue) = CreateObject("Scripting.Dictionary")
            BucketDict(fieldValue).Add "PreBalance", 0
            BucketDict(fieldValue).Add "PostBalance", 0
            BucketDict(fieldValue).Add "MarginTotal", 0
        End If

        ' Update bucket data
        BucketDict(fieldValue)("PreBalance") = BucketDict(fieldValue)("PreBalance") + currentBalance
        BucketDict(fieldValue)("MarginTotal") = BucketDict(fieldValue)("MarginTotal") + (currentBalance * currentMargin)

        ' Accumulate total balance
        totalBalance = totalBalance + currentBalance
        totalPreCompression = totalPreCompression + (currentMargin * currentBalance)

ContinueLoop:
    Next r

    ' Step 2: Apply compression starting from the highest bucket
    remainingReduction = totalBalance * CPR * HYLoanPrepayPct
    sortedKeys = BucketDict.Keys
    Call SortDictionaryKeysDescending(sortedKeys)

    For i = LBound(sortedKeys) To UBound(sortedKeys)
        BucketKey = sortedKeys(i)

        ' Get pre-compression balance
        bucketBalance = BucketDict(BucketKey)("PreBalance")

        ' Apply reduction
        If remainingReduction > 0 Then
            If bucketBalance <= remainingReduction Then
                ' Fully reduce the bucket
                remainingReduction = remainingReduction - bucketBalance
                BucketDict(BucketKey)("PostBalance") = 0
            Else
                ' Partially reduce the bucket
                BucketDict(BucketKey)("PostBalance") = bucketBalance - remainingReduction
                remainingReduction = 0
            End If
        Else
            ' No reduction needed
            BucketDict(BucketKey)("PostBalance") = bucketBalance
        End If

        ' Accumulate total post-compression balance
        totalCompressedBalance = totalCompressedBalance + BucketDict(BucketKey)("PostBalance")
        If BucketDict(BucketKey)("PostBalance") > 0 Then
            totalPostCompression = totalPostCompression + BucketDict(BucketKey)("MarginTotal")
        End If
    Next i

    ' Normalize pre- and post-compression margins
    If totalBalance > 0 Then
        totalPreCompression = totalPreCompression / totalBalance
    End If
    If totalCompressedBalance > 0 Then
        totalPostCompression = totalPostCompression / totalCompressedBalance
    Else
        totalPostCompression = 0
    End If

    ' Step 3: Output the results to a new worksheet
    On Error Resume Next
    Application.DisplayAlerts = False
    Set outputWs = ThisWorkbook.Sheets("Compression Results")
    If Not outputWs Is Nothing Then outputWs.Delete
    Application.DisplayAlerts = True
    On Error GoTo 0

    Set outputWs = ThisWorkbook.Sheets.Add
    outputWs.Name = "Compression Results"

    ' Write headers
    rowCounter = 1
    outputWs.Cells(rowCounter, 1).Value = "Bucket (Rate)"
    outputWs.Cells(rowCounter, 2).Value = "Pre-Compression Balance"
    outputWs.Cells(rowCounter, 3).Value = "Post-Compression Balance"
    outputWs.Cells(rowCounter, 4).Value = "% of Total Pool (Post-Compression)"
    rowCounter = rowCounter + 1

    ' Write bucket data from last to first
    For i = LBound(sortedKeys) To UBound(sortedKeys)
        BucketKey = sortedKeys(i)
        With BucketDict(BucketKey)
            outputWs.Cells(rowCounter, 1).Value = BucketKey & "%"
            outputWs.Cells(rowCounter, 2).Value = .Item("PreBalance")
            outputWs.Cells(rowCounter, 3).Value = .Item("PostBalance")
            If totalCompressedBalance > 0 Then
                outputWs.Cells(rowCounter, 4).Value = .Item("PostBalance") / totalCompressedBalance
            Else
                outputWs.Cells(rowCounter, 4).Value = 0
            End If
        End With
        rowCounter = rowCounter + 1
    Next i

    ' Write summary
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Pre-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Post-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalCompressedBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Margin Compression (bps)"
    outputWs.Cells(rowCounter, 2).Value = (totalPreCompression - totalPostCompression) * 10000

    ' Format output
    outputWs.Columns("A:D").AutoFit
    outputWs.Range("A1:D1").Font.Bold = True
    outputWs.Range("A1:D1").Interior.Color = RGB(211, 211, 211)

End Sub

-------v5------

Public Sub StratifyData(ws As Worksheet, colDict As Object, fieldCode As String, OutputSheetName As String, TableTitle As String, StratificationMode As String, Optional FieldInfo As CFieldValidationInfo)

    Dim BucketDict As Object
    Dim totalBalance As Double, totalCompressedBalance As Double
    Dim remainingReduction As Double, totalPreCompression As Double, totalPostCompression As Double
    Dim BucketKey As Variant, sortedKeys() As Variant, i As Long
    Dim outputWs As Worksheet, rowCounter As Long
    Dim preCompressionPct As Double, postCompressionPct As Double

    ' Initialize the BucketDict and totals
    Set BucketDict = CreateObject("Scripting.Dictionary")
    totalBalance = 0
    totalCompressedBalance = 0
    totalPreCompression = 0
    totalPostCompression = 0

    ' Retrieve compression parameters
    Dim HYLoanPrepayPct As Double, CPR As Double
    HYLoanPrepayPct = ThisWorkbook.Sheets("Control").Cells(13, 12).Value ' High-yield prepay %
    CPR = ThisWorkbook.Sheets("Control").Cells(12, 12).Value ' CPR %

    ' Retrieve column numbers
    Dim colnumber As Integer, colCurrentBalance As Integer, colMargin As Integer
    colnumber = colDict.Item(fieldCode)
    colCurrentBalance = colDict.Item("AR67")
    colMargin = colDict.Item("AR109")

    ' Step 1: Populate BucketDict with loan data
    For r = startRow To lastRow
        If filter = True And ws.Rows(r).EntireRow.Hidden Then GoTo ContinueLoop

        Dim currentBalance As Double, currentMargin As Double, fieldValue As Double
        currentBalance = ws.Cells(r, colCurrentBalance).Value
        currentMargin = ws.Cells(r, colMargin).Value
        fieldValue = ws.Cells(r, colnumber).Value

        ' Use the fieldValue as the key for buckets
        If Not BucketDict.Exists(fieldValue) Then
            Set BucketDict(fieldValue) = CreateObject("Scripting.Dictionary")
            BucketDict(fieldValue).Add "PreBalance", 0
            BucketDict(fieldValue).Add "PostBalance", 0
            BucketDict(fieldValue).Add "MarginTotal", 0
        End If

        ' Update bucket data
        BucketDict(fieldValue)("PreBalance") = BucketDict(fieldValue)("PreBalance") + currentBalance
        BucketDict(fieldValue)("MarginTotal") = BucketDict(fieldValue)("MarginTotal") + (currentBalance * currentMargin)

        ' Accumulate total balance
        totalBalance = totalBalance + currentBalance
        totalPreCompression = totalPreCompression + (currentMargin * currentBalance)

ContinueLoop:
    Next r

    ' Step 2: Apply compression starting from the highest bucket
    remainingReduction = totalBalance * CPR * HYLoanPrepayPct
    sortedKeys = BucketDict.Keys
    Call SortDictionaryKeysDescending(sortedKeys)

    For i = LBound(sortedKeys) To UBound(sortedKeys)
        BucketKey = sortedKeys(i)

        ' Get pre-compression balance
        Dim bucketBalance As Double
        bucketBalance = BucketDict(BucketKey)("PreBalance")

        ' Apply reduction
        If remainingReduction > 0 Then
            If bucketBalance <= remainingReduction Then
                ' Fully reduce the bucket
                remainingReduction = remainingReduction - bucketBalance
                BucketDict(BucketKey)("PostBalance") = 0
            Else
                ' Partially reduce the bucket
                BucketDict(BucketKey)("PostBalance") = bucketBalance - remainingReduction
                remainingReduction = 0
            End If
        Else
            ' No reduction needed
            BucketDict(BucketKey)("PostBalance") = bucketBalance
        End If

        ' Accumulate total post-compression balance
        totalCompressedBalance = totalCompressedBalance + BucketDict(BucketKey)("PostBalance")
        If BucketDict(BucketKey)("PostBalance") > 0 Then
            totalPostCompression = totalPostCompression + BucketDict(BucketKey)("MarginTotal")
        End If
    Next i

    ' Normalize pre- and post-compression margins
    If totalBalance > 0 Then
        totalPreCompression = totalPreCompression / totalBalance
    End If
    If totalCompressedBalance > 0 Then
        totalPostCompression = totalPostCompression / totalCompressedBalance
    Else
        totalPostCompression = 0
    End If

    ' Step 3: Output the results to "Pool Stratifications" tab
    On Error Resume Next
    Set outputWs = ThisWorkbook.Sheets(OutputSheetName)
    If outputWs Is Nothing Then
        Set outputWs = ThisWorkbook.Sheets.Add
        outputWs.Name = OutputSheetName
    End If
    On Error GoTo 0

    ' Write headers
    rowCounter = outputWs.Cells(outputWs.Rows.Count, 1).End(xlUp).Row + 2
    outputWs.Cells(rowCounter, 1).Value = "Bucket (Rate)"
    outputWs.Cells(rowCounter, 2).Value = "Pre-Compression Balance"
    outputWs.Cells(rowCounter, 3).Value = "% of Total Pool (Pre-Compression)"
    outputWs.Cells(rowCounter, 4).Value = "Post-Compression Balance"
    outputWs.Cells(rowCounter, 5).Value = "% of Total Pool (Post-Compression)"
    rowCounter = rowCounter + 1

    ' Write bucket data
    For i = LBound(sortedKeys) To UBound(sortedKeys)
        BucketKey = sortedKeys(i)
        With BucketDict(BucketKey)
            preCompressionPct = .Item("PreBalance") / totalBalance
            If totalCompressedBalance > 0 Then
                postCompressionPct = .Item("PostBalance") / totalCompressedBalance
            Else
                postCompressionPct = 0
            End If

            outputWs.Cells(rowCounter, 1).Value = BucketKey & "%"
            outputWs.Cells(rowCounter, 2).Value = .Item("PreBalance")
            outputWs.Cells(rowCounter, 3).Value = preCompressionPct
            outputWs.Cells(rowCounter, 4).Value = .Item("PostBalance")
            outputWs.Cells(rowCounter, 5).Value = postCompressionPct
        End With
        rowCounter = rowCounter + 1
    Next i

    ' Write summary
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Pre-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Post-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalCompressedBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Margin Compression (bps)"
    outputWs.Cells(rowCounter, 2).Value = (totalPreCompression - totalPostCompression) * 10000

    ' Format output
    outputWs.Columns("A:E").AutoFit
    outputWs.Range("A1:E1").Font.Bold = True
    outputWs.Range("A1:E1").Interior.Color = RGB(211, 211, 211)

End Sub

----v6-----

Public Sub StratifyDataWithCompression(ws As Worksheet, colDict As Object, OutputSheetName As String)

    Dim BucketDict As Object
    Dim totalBalance As Double, totalCompressedBalance As Double
    Dim remainingReduction As Double, totalPreCompression As Double, totalPostCompression As Double
    Dim BucketKey As Variant, sortedKeys() As Variant, i As Long
    Dim outputWs As Worksheet, rowCounter As Long
    Dim preCompressionPct As Double, postCompressionPct As Double

    ' Initialize the BucketDict and totals
    Set BucketDict = CreateObject("Scripting.Dictionary")
    totalBalance = 0
    totalCompressedBalance = 0
    totalPreCompression = 0
    totalPostCompression = 0

    ' Retrieve compression parameters from Control tab
    Dim HYLoanPrepayPct As Double, CPR As Double
    HYLoanPrepayPct = ThisWorkbook.Sheets("Control").Cells(1, 9).Value ' High-yield prepay %
    CPR = ThisWorkbook.Sheets("Control").Cells(2, 9).Value ' CPR %

    ' Retrieve column numbers
    Dim colInterestRate As Integer, colCurrentBalance As Integer
    colInterestRate = colDict.Item("AR110")
    colCurrentBalance = colDict.Item("AR67")

    ' Step 1: Populate BucketDict with loan data
    For r = startRow To lastRow
        If filter = True And ws.Rows(r).EntireRow.Hidden Then GoTo ContinueLoop

        Dim currentBalance As Double, currentMargin As Double, fieldValue As Double
        currentBalance = ws.Cells(r, colCurrentBalance).Value
        currentMargin = ws.Cells(r, colInterestRate).Value

        ' Use the interest rate (fieldValue) as the key for buckets
        fieldValue = currentMargin
        If Not BucketDict.Exists(fieldValue) Then
            Set BucketDict(fieldValue) = CreateObject("Scripting.Dictionary")
            BucketDict(fieldValue).Add "PreBalance", 0
            BucketDict(fieldValue).Add "PostBalance", 0
            BucketDict(fieldValue).Add "MarginTotal", 0
        End If

        ' Update bucket data
        BucketDict(fieldValue)("PreBalance") = BucketDict(fieldValue)("PreBalance") + currentBalance
        BucketDict(fieldValue)("MarginTotal") = BucketDict(fieldValue)("MarginTotal") + (currentBalance * currentMargin)

        ' Accumulate total balance
        totalBalance = totalBalance + currentBalance
        totalPreCompression = totalPreCompression + (currentMargin * currentBalance)

ContinueLoop:
    Next r

    ' Step 2: Apply compression starting from the highest bucket
    remainingReduction = totalBalance * CPR * HYLoanPrepayPct
    sortedKeys = BucketDict.Keys
    Call SortDictionaryKeysDescending(sortedKeys)

    For i = LBound(sortedKeys) To UBound(sortedKeys)
        BucketKey = sortedKeys(i)

        ' Get pre-compression balance
        Dim bucketBalance As Double
        bucketBalance = BucketDict(BucketKey)("PreBalance")

        ' Apply reduction
        If remainingReduction > 0 Then
            If bucketBalance <= remainingReduction Then
                ' Fully reduce the bucket
                remainingReduction = remainingReduction - bucketBalance
                BucketDict(BucketKey)("PostBalance") = 0
            Else
                ' Partially reduce the bucket
                BucketDict(BucketKey)("PostBalance") = bucketBalance - remainingReduction
                remainingReduction = 0
            End If
        Else
            ' No reduction needed
            BucketDict(BucketKey)("PostBalance") = bucketBalance
        End If

        ' Accumulate total post-compression balance
        totalCompressedBalance = totalCompressedBalance + BucketDict(BucketKey)("PostBalance")
        If BucketDict(BucketKey)("PostBalance") > 0 Then
            totalPostCompression = totalPostCompression + BucketDict(BucketKey)("MarginTotal")
        End If
    Next i

    ' Normalize pre- and post-compression margins
    If totalBalance > 0 Then
        totalPreCompression = totalPreCompression / totalBalance
    End If
    If totalCompressedBalance > 0 Then
        totalPostCompression = totalPostCompression / totalCompressedBalance
    Else
        totalPostCompression = 0
    End If

    ' Step 3: Output the results to a new worksheet
    On Error Resume Next
    Application.DisplayAlerts = False
    Set outputWs = ThisWorkbook.Sheets(OutputSheetName)
    If Not outputWs Is Nothing Then outputWs.Delete
    Application.DisplayAlerts = True
    On Error GoTo 0

    Set outputWs = ThisWorkbook.Sheets.Add
    outputWs.Name = OutputSheetName

    ' Write headers
    rowCounter = 1
    outputWs.Cells(rowCounter, 1).Value = "Bucket (Rate)"
    outputWs.Cells(rowCounter, 2).Value = "Pre-Compression Balance"
    outputWs.Cells(rowCounter, 3).Value = "% of Total Pool (Pre-Compression)"
    outputWs.Cells(rowCounter, 4).Value = "Post-Compression Balance"
    outputWs.Cells(rowCounter, 5).Value = "% of Total Pool (Post-Compression)"
    rowCounter = rowCounter + 1

    ' Write bucket data from highest to lowest
    For i = LBound(sortedKeys) To UBound(sortedKeys)
        BucketKey = sortedKeys(i)
        With BucketDict(BucketKey)
            preCompressionPct = .Item("PreBalance") / totalBalance
            If totalCompressedBalance > 0 Then
                postCompressionPct = .Item("PostBalance") / totalCompressedBalance
            Else
                postCompressionPct = 0
            End If

            outputWs.Cells(rowCounter, 1).Value = BucketKey & "%"
            outputWs.Cells(rowCounter, 2).Value = .Item("PreBalance")
            outputWs.Cells(rowCounter, 3).Value = preCompressionPct
            outputWs.Cells(rowCounter, 4).Value = .Item("PostBalance")
            outputWs.Cells(rowCounter, 5).Value = postCompressionPct
        End With
        rowCounter = rowCounter + 1
    Next i

    ' Write summary
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Pre-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Total Balance (Post-Compression)"
    outputWs.Cells(rowCounter, 2).Value = totalCompressedBalance
    rowCounter = rowCounter + 1
    outputWs.Cells(rowCounter, 1).Value = "Margin Compression (bps)"
    outputWs.Cells(rowCounter, 2).Value = (totalPreCompression - totalPostCompression) * 10000

    ' Format output
    outputWs.Columns("A:E").AutoFit
    outputWs.Range("A1:E1").Font.Bold = True
    outputWs.Range("A1:E1").Interior.Color = RGB(211, 211, 211)

End Sub

-----v7 change in Analysedata
Sub AnalyzeLoanData()
    Dim ws As Worksheet
    Dim cell As Range
    Dim response As VbMsgBoxResult
    Dim validationInfo As CFieldValidationInfo
    Dim colDict As Object
    Dim colnumber As Integer
    Dim i As Integer
    Dim outputWsName As String
    Dim compressionOutputWsName As String

    filter = False
    startTime = Timer

    ' Define input and output worksheet names
    Set ws = ThisWorkbook.Sheets("LLD")
    outputWsName = "BalanceBucket"
    compressionOutputWsName = "Compression Results"

    ' ---------------------Variable Initialization-------------------
    startRow = 0
    AR1FieldCol = 0
    ARFieldRow = 0

    ' ------------------Starting Variable Definition----------------------------------
    ' Searches to find which column contains the AR1 field and then the row with the AR fields
    Set ARFieldRange = ws.Cells.Find(What:="AR1", LookIn:=xlValues, Lookat:=xlWhole)

    If Not ARFieldRange Is Nothing Then
        AR1FieldCol = ARFieldRange.Column
        ARFieldRow = ARFieldRange.Row
    Else
        MsgBox "AR1 field not found"
        Exit Sub
    End If

    ' Determine the row where the data starts
    For i = ARFieldRow To 20
        If IsDate(ws.Cells(i, AR1FieldCol)) Then
            startRow = ws.Cells(i, AR1FieldCol).Row
            Exit For
        End If
    Next i

    ' Check if there's a filter on tab LLD
    If ws.AutoFilterMode And ws.FilterMode Then
        filter = (MsgBox("You have filters on the Loan Data. Do you want to run the strats only on the filtered data?", vbYesNo, "Filter Confirmation") = vbYes)
    End If

    fieldCodes = Array("AR1", "AR3", "AR5", "AR7", "AR8", "AR16", "AR19", "AR21", "AR22", "AR23", "AR31", "AR32", "AR33", "AR34", "AR35", "AR36", "AR47", "AR55", "AR56", "AR59", "AR61", "AR66", "AR67", "AR69", "AR71", "AR72", "AR80", "AR84", "AR107", "AR108", "AR109", "AR110", "AR118", "AR120", "AR121", "AR122", "AR128", "AR129", "AR130", "AR135", "AR136", "AR137", "AR138", "AR141", "AR143", "AR145", "AR166", "AR169", "AR170", "AR174")
    
    ' Initialization of dictionary with column numbers for each field
    Set colDict = GetColumnNumbersByFieldCodes(ws, fieldCodes)

    ' Ensure relevant column fields given above exist in the data
    For Each fieldCode In fieldCodes
        If colDict.Item(fieldCode) = 0 Then
            MsgBox "One or more field codes not found in the dataset."
            Exit Sub
        End If
    Next fieldCode

    ' Find last row and pool-cut date
    lastRow = ws.Cells(ws.Rows.Count, colDict.Item("AR67")).End(xlUp).Row
    pcd = ws.Cells(startRow, AR1FieldCol).Value

    ' -----------------Data Validation Section-----------------------------
    Set templateWs = ThisWorkbook.Sheets("Template")
    Set fieldValidations = GetFieldValidationInfo(templateWs, fieldCodes)

    If Not ValidationMod.ValidateData(ws, i, colnumber, validationInfo) Then
        Exit Sub
    End If

    ' Clear the output tab
    Set outputWs = ThisWorkbook.Sheets(outputWsName)
    If Not outputWs Is Nothing Then
        outputWs.Cells.Clear
        Call Clearall
    End If

    ' Call summary statistics calculation
    Call StatsMod.CalculateSummaryStatistics(ws, colDict, fieldCodes)

    ' -------------------Stratifications-----------------------------------
    Dim fieldConfigs As Object
    Set fieldConfigs = CreateObject("Scripting.Dictionary")
    Dim configAR110 As New FieldConfig

    ' AR110 - Current Interest Rate
    configAR110.OutputSheetName = outputWsName
    configAR110.TableTitle = "Current Interest Rate"
    configAR110.StratificationMode = "Numerical"
    Set configAR110.validationInfo = fieldValidations("AR110")
    fieldConfigs.Add "AR110", configAR110

    ' Call StratifyData for standard stratification
    Call StratMod.StratifyData(ws, colDict, "AR110", configAR110.OutputSheetName, configAR110.TableTitle, configAR110.StratificationMode, configAR110.validationInfo)

    ' -------------------Compression Analysis-----------------------------------
    ' Perform compression analysis
    Call StratifyDataWithCompression(ws, colDict, compressionOutputWsName)

    ' -------------------Logging and Completion-----------------------------------
    endTime = Timer
    duration = endTime - startTime

    ThisWorkbook.Sheets("Control").Cells(1, 1).Value = duration
    ThisWorkbook.Sheets("Control").Cells(1, 2).Value = "All steps completed"

    MsgBox "Analysis and compression completed in " & Format(duration, "0.00") & " seconds.", vbInformation
End Sub


