Sub AnalyzeLoanData()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("LLD") ' Replace with your data sheet name
    
    ' Assume "Current Balance" is in Column B and "Original LTV" in Column C
    Const BALANCE_COL As String = "B"
    Const LTV_COL As String = "C"
    Const START_ROW As Integer = 2 ' Assuming data starts from row 2
    
    ' Stratify Data
    Call StratifyByCurrentBalance(ws, BALANCE_COL, START_ROW)
    Call StratifyByOriginalLTV(ws, LTV_COL, START_ROW)
End Sub

Sub StratifyByCurrentBalance(ws As Worksheet, col As String, startRow As Integer)
    Dim BalanceBuckets As Variant
    BalanceBuckets = Array(0, 100000, 200000, 300000, 400000, 500000) ' Define your bucket ranges
    
    Dim i As Long
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, col).End(xlUp).Row
    
    Dim BucketDict As Object
    Set BucketDict = CreateObject("Scripting.Dictionary")
    
    ' Initialize buckets in dictionary
    For i = LBound(BalanceBuckets) To UBound(BalanceBuckets) - 1
        BucketDict(BalanceBuckets(i) & "-" & BalanceBuckets(i + 1)) = New Collection
    Next i

    Dim r As Long, val As Double, key As String
    For r = startRow To lastRow
        val = ws.Cells(r, col).Value
        For i = LBound(BalanceBuckets) To UBound(BalanceBuckets) - 1
            If val >= BalanceBuckets(i) And val < BalanceBuckets(i + 1) Then
                key = BalanceBuckets(i) & "-" & BalanceBuckets(i + 1)
                BucketDict(key).Add r ' Storing row numbers
                Exit For
            End If
        Next i
    Next r

    ' Output results
    Call OutputBuckets(ws, BucketDict, "BalanceBuckets")
End Sub

Sub StratifyByOriginalLTV(ws As Worksheet, col As String, startRow As Integer)
    ' Similar to StratifyByCurrentBalance, define LTVBuckets and distribute data
    ' Use OutputBuckets function to output results
End Sub

Sub OutputBuckets(sourceWs As Worksheet, BucketDict As Object, OutputSheetPrefix As String)
    Dim key As Variant
    Dim i As Integer, r As Long
    Dim outputWs As Worksheet

    For Each key In BucketDict.keys
        Set outputWs = Worksheets.Add
        outputWs.Name = OutputSheetPrefix & " " & key

        ' Copy headings
        sourceWs.Rows(1).Copy Destination:=outputWs.Rows(1)

        ' Copy data rows
        For i = 1 To BucketDict(key).Count
            r = BucketDict(key)(i)
            sourceWs.Rows(r).Copy Destination:=outputWs.Rows(i + 1)
        Next i
    Next key
End Sub


Sub StratifyByCurrentBalance(ws As Worksheet, colDict As Object, balanceFieldCode As String)
    ' Check if the balance field code is in the dictionary
    If Not colDict.Exists(balanceFieldCode) Then
        MsgBox "Balance field code not found in the dataset."
        Exit Sub
    End If

    ' Get the column number for the current balance
    Dim colCurrentBalance As Integer
    colCurrentBalance = colDict.Item(balanceFieldCode)

    ' Define buckets for Current Balance
    Dim BalanceBuckets As Variant
    BalanceBuckets = Array(0, 100000, 200000, 300000, 400000, 500000) ' Define your bucket ranges
    
    Dim BucketTable As Collection
    Set BucketTable = New Collection
    
    Dim i As Long
    For i = LBound(BalanceBuckets) To UBound(BalanceBuckets) - 1
        Dim BucketRange As String
        BucketRange = ">= " & BalanceBuckets(i) & " And < " & BalanceBuckets(i + 1)
        BucketTable.Add BucketRange
    Next i

    ' Add code to distribute data into buckets and create a table for each bucket
    ' ... (Rest of the stratification logic here)
End Sub


Sub AnalyzeLoanData()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("LLD") ' Replace with your data sheet name
    
    ' Assume "Current Balance" is in Column B and "Original LTV" in Column C
    Const BALANCE_COL As String = "B"
    Const LTV_COL As String = "C"
    Const START_ROW As Integer = 2 ' Assuming data starts from row 2
    
    ' Stratify Data
    Call StratifyByCurrentBalance(ws, BALANCE_COL, START_ROW)
    Call StratifyByOriginalLTV(ws, LTV_COL, START_ROW)
End Sub

Sub StratifyByCurrentBalance(ws As Worksheet, col As String, startRow As Integer)
    Dim BalanceBuckets As Variant
    BalanceBuckets = Array(0, 100000, 200000, 300000, 400000, 500000) ' Define your bucket ranges
    
    Dim i As Long
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, col).End(xlUp).Row
    
    Dim BucketDict As Object
    Set BucketDict = CreateObject("Scripting.Dictionary")
    
    ' Initialize buckets in dictionary
    For i = LBound(BalanceBuckets) To UBound(BalanceBuckets) - 1
        BucketDict(BalanceBuckets(i) & "-" & BalanceBuckets(i + 1)) = New Collection
    Next i

    Dim r As Long, val As Double, key As String
    For r = startRow To lastRow
        val = ws.Cells(r, col).Value
        For i = LBound(BalanceBuckets) To UBound(BalanceBuckets) - 1
            If val >= BalanceBuckets(i) And val < BalanceBuckets(i + 1) Then
                key = BalanceBuckets(i) & "-" & BalanceBuckets(i + 1)
                BucketDict(key).Add r ' Storing row numbers
                Exit For
            End If
        Next i
    Next r

    ' Output results
    Call OutputBuckets(ws, BucketDict, "BalanceBuckets")
End Sub

Sub StratifyByOriginalLTV(ws As Worksheet, col As String, startRow As Integer)
    ' Similar to StratifyByCurrentBalance, define LTVBuckets and distribute data
    ' Use OutputBuckets function to output results
End Sub

Sub OutputBuckets(sourceWs As Worksheet, BucketDict As Object, OutputSheetPrefix As String)
    Dim key As Variant
    Dim i As Integer, r As Long
    Dim outputWs As Worksheet

    For Each key In BucketDict.keys
        Set outputWs = Worksheets.Add
        outputWs.Name = OutputSheetPrefix & " " & key

        ' Copy headings
        sourceWs.Rows(1).Copy Destination:=outputWs.Rows(1)

        ' Copy data rows
        For i = 1 To BucketDict(key).Count
            r = BucketDict(key)(i)
            sourceWs.Rows(r).Copy Destination:=outputWs.Rows(i + 1)
        Next i
    Next key
End Sub
Sub StratifyByCurrentBalance(ws As Worksheet, colDict As Object, balanceFieldCode As String)
    ' Check if the balance field code is in the dictionary
    If Not colDict.Exists(balanceFieldCode) Then
        MsgBox "Balance field code not found in the dataset."
        Exit Sub
    End If

    ' Get the column number for the current balance
    Dim colCurrentBalance As Integer
    colCurrentBalance = colDict.Item(balanceFieldCode)

    ' Define buckets for Current Balance
    Dim BalanceBuckets As Variant
    BalanceBuckets = Array(0, 100000, 200000, 300000, 400000, 500000) ' Define your bucket ranges
    
    ' Initialize BucketDict
    Dim BucketDict As Object
    Set BucketDict = CreateObject("Scripting.Dictionary")
    
    Dim i As Long
    For i = LBound(BalanceBuckets) To UBound(BalanceBuckets) - 1
        Dim BucketKey As String
        BucketKey = BalanceBuckets(i) & "-" & BalanceBuckets(i + 1)
        BucketDict.Add BucketKey, New Collection
    Next i

    ' Loop through data and assign each entry to the appropriate bucket
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colCurrentBalance).End(xlUp).Row
    
    Dim r As Long, currentBalance As Double, BucketRange As String
    For r = 2 To lastRow ' Assuming data starts from row 2
        currentBalance = ws.Cells(r, colCurrentBalance).Value
        
        For i = LBound(BalanceBuckets) To UBound(BalanceBuckets) - 1
            If currentBalance >= BalanceBuckets(i) And currentBalance < BalanceBuckets(i + 1) Then
                BucketRange = BalanceBuckets(i) & "-" & BalanceBuckets(i + 1)
                BucketDict.Item(BucketRange).Add r ' Storing row numbers
                Exit For
            End If
        Next i
    Next r

    ' Output the results (Example: print count of loans in each bucket)
    For Each BucketRange In BucketDict.Keys
        Debug.Print "Bucket " & BucketRange & ": " & BucketDict.Item(BucketRange).Count & " loans"
    Next BucketRange
End Sub


Sub StratifyByCurrentBalance(ws As Worksheet, colDict As Object, balanceFieldCode As String)
    ' Check if the balance field code is in the dictionary
    If Not colDict.Exists(balanceFieldCode) Then
        MsgBox "Balance field code not found in the dataset."
        Exit Sub
    End If

    ' Get the column number for the current balance
    Dim colCurrentBalance As Integer
    colCurrentBalance = colDict.Item(balanceFieldCode)

    ' Define buckets for Current Balance
    Dim BalanceBuckets As Variant
    BalanceBuckets = Array(0, 100000, 200000, 300000, 400000, 500000) ' Define your bucket ranges
    
    ' Initialize BucketDict
    Dim BucketDict As Object
    Set BucketDict = CreateObject("Scripting.Dictionary")
    
    Dim i As Long
    For i = LBound(BalanceBuckets) To UBound(BalanceBuckets) - 1
        Dim BucketKey As String
        BucketKey = BalanceBuckets(i) & "-" & BalanceBuckets(i + 1)
        BucketDict.Add BucketKey, New Collection
    Next i

    ' Loop through data and assign each entry to the appropriate bucket
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colCurrentBalance).End(xlUp).Row
    
    Dim r As Long, currentBalance As Double, BucketRange As String
    For r = 2 To lastRow ' Assuming data starts from row 2
        currentBalance = ws.Cells(r, colCurrentBalance).Value
        
        For i = LBound(BalanceBuckets) To UBound(BalanceBuckets) - 1
            If currentBalance >= BalanceBuckets(i) And currentBalance < BalanceBuckets(i + 1) Then
                BucketRange = BalanceBuckets(i) & "-" & BalanceBuckets(i + 1)
                BucketDict.Item(BucketRange).Add Array(r, currentBalance) ' Storing row number and balance
                Exit For
            End If
        Next i
    Next r

    ' Utilize OutputBuckets subroutine to handle the results
    Call OutputBuckets(ws, BucketDict, "BalanceBucket")
End Sub
Sub OutputBuckets(sourceWs As Worksheet, BucketDict As Object, OutputSheetPrefix As String)
    Dim BucketRange As Variant
    Dim BucketData As Variant
    Dim outputWs As Worksheet
    Dim rowCounter As Long

    For Each BucketRange In BucketDict.Keys
        Set outputWs = Worksheets.Add
        outputWs.Name = OutputSheetPrefix & " " & BucketRange

        ' Copy headings
        sourceWs.Rows(1).Copy Destination:=outputWs.Rows(1)

        ' Initialize row counter
        rowCounter = 2

        ' Copy data rows and sum balances
        Dim totalBalanceInBucket As Double
        totalBalanceInBucket = 0

        For Each BucketData In BucketDict.Item(BucketRange)
            sourceWs.Rows(BucketData(0)).Copy Destination:=outputWs.Rows(rowCounter)
            totalBalanceInBucket = totalBalanceInBucket + BucketData(1)
            rowCounter = rowCounter + 1
        Next BucketData

        ' Output total balance in the bucket
        outputWs.Cells(rowCounter + 1, 1).Value = "Total Balance in Bucket:"
        outputWs.Cells(rowCounter + 1, 2).Value = totalBalanceInBucket
    Next BucketRange
End Sub
Sub OutputBuckets(sourceWs As Worksheet, BucketDict As Object, outputSheetName As String)
    Dim outputWs As Worksheet
    On Error Resume Next
    Set outputWs = ThisWorkbook.Sheets(outputSheetName)
    On Error GoTo 0

    ' Create the output worksheet if it doesn't exist
    If outputWs Is Nothing Then
        Set outputWs = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        outputWs.Name = outputSheetName
    Else
        outputWs.Cells.Clear ' Clear existing data if sheet exists
    End If

    Dim BucketRange As Variant
    Dim rowCounter As Long
    rowCounter = 1 ' Start from the first row

    For Each BucketRange In BucketDict.Keys
        ' Print the bucket range as a header
        outputWs.Cells(rowCounter, 1).Value = "Bucket: " & BucketRange
        rowCounter = rowCounter + 1

        ' Print data for each item in the bucket
        Dim BucketData As Variant
        For Each BucketData In BucketDict.Item(BucketRange)
            ' Assuming BucketData(0) contains the row number
            sourceWs.Rows(BucketData(0)).Copy Destination:=outputWs.Rows(rowCounter)
            rowCounter = rowCounter + 1
        Next BucketData

        ' Add a blank row after each bucket for separation
        rowCounter = rowCounter + 1
    Next BucketRange

    ' AutoFit for readability
    outputWs.Columns.AutoFit
End Sub

Sub OutputBuckets(sourceWs As Worksheet, BucketDict As Object, outputSheetName As String)
    Dim outputWs As Worksheet
    On Error Resume Next
    Set outputWs = ThisWorkbook.Sheets(outputSheetName)
    On Error GoTo 0

    ' Create or clear the output worksheet
    If outputWs Is Nothing Then
        Set outputWs = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        outputWs.Name = outputSheetName
    Else
        outputWs.Cells.Clear
    End If

    Dim BucketRange As Variant
    Dim rowCounter As Long
    rowCounter = 1

    For Each BucketRange In BucketDict.Keys
        ' Initialize sum for each bucket
        Dim totalCurrentBalance As Double
        totalCurrentBalance = 0

        ' Calculate total current balance for each bucket
        Dim BucketData As Variant
        For Each BucketData In BucketDict.Item(BucketRange)
            totalCurrentBalance = totalCurrentBalance + BucketData(1) ' Assuming second element is current balance
        Next BucketData

        ' Output the total current balance for the bucket
        outputWs.Cells(rowCounter, 1).Value = "Bucket: " & BucketRange
        outputWs.Cells(rowCounter, 2).Value = totalCurrentBalance
        rowCounter = rowCounter + 1
    Next BucketRange

    ' AutoFit columns for readability
    outputWs.Columns.AutoFit
End Sub



