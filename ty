Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' Assume colDict is already populated with necessary field codes
    ' Example: colCurrentBalance = colDict("AR67"), colRepaymentType = colDict("RepaymentTypeCode")

    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colDict("AR67")).End(xlUp).Row
    
    ' Variables for aggregate data
    Dim totalBalance As Double, totalInterestPayment As Double, totalPrincipalPayment As Double
    totalBalance = 0
    totalInterestPayment = 0
    totalPrincipalPayment = 0

    Dim i As Long
    For i = 2 To lastRow
        ' Extracting loan data
        Dim currentBalance As Double, repaymentType As String, interestRateType As String, ' other variables
        currentBalance = ws.Cells(i, colDict("AR67")).Value
        repaymentType = ws.Cells(i, colDict("RepaymentTypeCode")).Value ' Replace "RepaymentTypeCode" with actual field code
        ' ... extract other necessary loan data ...

        ' Classify loans based on interest rate type
        ' ... logic to determine interest rate type ...

        ' Calculate loan payments
        Dim monthlyPayment As Double, interestPayment As Double, principalPayment As Double
        ' Basic example using Excel's PMT function
        ' monthlyPayment = Pmt(interestRate / 12, term, -currentBalance)
        ' interestPayment = ... ' Calculation based on the type of loan
        ' principalPayment = ... ' Calculation based on the type of loan

        ' Aggregate the calculations
        totalBalance = totalBalance + currentBalance
        totalInterestPayment = totalInterestPayment + interestPayment
        totalPrincipalPayment = totalPrincipalPayment + principalPayment
    Next i

    ' Output results to a new worksheet or a designated area in the existing worksheet
    ' Example: Output in a new worksheet
    Dim summaryWs As Worksheet
    Set summaryWs = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
    summaryWs.Name = "Portfolio Summary"
    With summaryWs
        .Cells(1, 1).Value = "Total Balance"
        .Cells(1, 2).Value = totalBalance
        .Cells(2, 1).Value = "Total Interest Payment"
        .Cells(2, 2).Value = totalInterestPayment
        .Cells(3, 1).Value = "Total Principal Payment"
        .Cells(3, 2).Value = totalPrincipalPayment
    End With
End Sub
-------
Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' Assuming colDict has necessary mappings
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colDict("AR67")).End(xlUp).Row

    ' Aggregate variables for each type of loan
    Dim totalFixedBalance As Double, totalFloatingBalance As Double, totalFixedToFloatingBalance As Double
    totalFixedBalance = 0
    totalFloatingBalance = 0
    totalFixedToFloatingBalance = 0

    ' Other necessary variables for calculation
    Dim indexRate As Double  ' Assuming this is a known value or retrieved from somewhere
    indexRate = 0.03  ' Example value, replace with actual index rate

    Dim i As Long
    For i = 2 To lastRow
        ' Extract loan data
        Dim currentBalance As Double, interestRateType As String, interestRate As Double, monthlyPayment As Double, remainingTerm As Integer
        currentBalance = ws.Cells(i, colDict("AR67")).Value
        interestRateType = ws.Cells(i, colDict("InterestRateTypeCode")).Value ' Replace with actual field code
        interestRate = ws.Cells(i, colDict("InterestRateCode")).Value ' Replace with actual field code
        remainingTerm = ws.Cells(i, colDict("RemainingTermCode")).Value ' Replace with actual field code

        ' Initialize variables for each loan
        Dim totalInterestThisLoan As Double, totalPrincipalThisLoan As Double
        totalInterestThisLoan = 0
        totalPrincipalThisLoan = 0

        Select Case interestRateType
            Case "Fixed"
                monthlyPayment = Pmt(interestRate / 12, remainingTerm, -currentBalance)
                ' Simplified fixed-rate loan calculations
                Dim month As Integer
                For month = 1 To remainingTerm
                    Dim interestThisMonth As Double
                    interestThisMonth = currentBalance * (interestRate / 12)
                    Dim principalThisMonth As Double
                    principalThisMonth = monthlyPayment - interestThisMonth
                    currentBalance = currentBalance - principalThisMonth

                    totalInterestThisLoan = totalInterestThisLoan + interestThisMonth
                    totalPrincipalThisLoan = totalPrincipalThisLoan + principalThisMonth
                Next month
                totalFixedBalance = totalFixedBalance + currentBalance

            Case "Floating"
                ' Assuming the interest rate for floating loans is indexRate + margin
                Dim margin As Double
                margin = ws.Cells(i, colDict("MarginCode")).Value ' Replace with actual field code
                ' Floating-rate loan calculations with changing interest rate
                For month = 1 To remainingTerm
                    interestRate = indexRate + margin
                    monthlyPayment = Pmt(interestRate / 12, remainingTerm - month + 1, -currentBalance)
                    interestThisMonth = currentBalance * (interestRate / 12)
                    principalThisMonth = monthlyPayment - interestThisMonth
                    currentBalance = currentBalance - principalThisMonth

                    totalInterestThisLoan = totalInterestThisLoan + interestThisMonth
                    totalPrincipalThisLoan = totalPrincipalThisLoan + principalThisMonth
                Next month
                totalFloatingBalance = totalFloatingBalance + currentBalance

            Case "FixedToFloating"
                ' Additional logic to determine whether the loan is currently in fixed or floating period
                ' ... Logic for determining the period ...
                ' Then perform similar calculations as above for either fixed or floating period
                ' ...
                totalFixedToFloatingBalance = totalFixedToFloatingBalance + currentBalance
        End Select
    Next i

    ' Output aggregated results
    ' ... Output total balances and other aggregate metrics ...
End Sub



======

Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' Assuming colDict has necessary mappings
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colDict("AR67")).End(xlUp).Row

    ' Variables for aggregate data, categorized by interest rate type
    Dim totalFixedBalance As Double, totalFloatingBalance As Double, totalFixedToFloatingBalance As Double
    totalFixedBalance = 0
    totalFloatingBalance = 0
    totalFixedToFloatingBalance = 0

    ' Pool cut-off date
    Dim poolCutOffDate As Date
    poolCutOffDate = ws.Cells(2, colDict("AR1")).Value  ' Assuming the same date is used for all loans

    Dim i As Long
    For i = 2 To lastRow
        ' Extract loan data
        Dim currentBalance As Double, interestRateType As String, interestRate As Double, monthlyPayment As Double, remainingTerm As Integer
        currentBalance = ws.Cells(i, colDict("AR67")).Value
        interestRateType = ws.Cells(i, colDict("InterestRateTypeCode")).Value ' Replace with actual field code
        interestRate = ws.Cells(i, colDict("InterestRateCode")).Value ' Replace with actual field code
        remainingTerm = ws.Cells(i, colDict("RemainingTermCode")).Value ' Replace with actual field code

        ' Initialize variables for each loan
        Dim totalInterestThisLoan As Double, totalPrincipalThisLoan As Double
        totalInterestThisLoan = 0
        totalPrincipalThisLoan = 0

        Select Case interestRateType
            Case "Fixed"
                ' Perform calculations for fixed rate loans (same as previous code)

            Case "Floating"
                ' Perform calculations for floating rate loans (same as previous code)

            Case "FixedToFloating"
                ' Retrieve reversion date and margin
                Dim reversionDate As Date, postReversionMargin As Double
                reversionDate = ws.Cells(i, colDict("AR121")).Value
                postReversionMargin = ws.Cells(i, colDict("AR120")).Value

                ' Determine if in fixed or floating period
                Dim monthsUntilReversion As Integer
                monthsUntilReversion = DateDiff("m", poolCutOffDate, reversionDate)

                ' Perform calculations for fixed period
                For month = 1 To Min(monthsUntilReversion, remainingTerm)
                    ' Fixed period calculations (same as in "Fixed" case)
                Next month

                ' Perform calculations for floating period if applicable
                If remainingTerm > monthsUntilReversion Then
                    For month = monthsUntilReversion + 1 To remainingTerm
                        ' Adjust interest rate based on post-reversion margin
                        interestRate = indexRate + postReversionMargin
                        ' Floating period calculations (same as in "Floating" case)
                    Next month
                End If

                totalFixedToFloatingBalance = totalFixedToFloatingBalance + currentBalance

            ' ... Handle other cases or default ...
        End Select
    Next i

    ' Output aggregated results (same as previous code)
End Sub

' Helper Function to find the minimum of two values
Function Min(val1 As Integer, val2 As Integer) As Integer
    If val1 < val2 Then
        Min = val1
    Else
        Min = val2
    End If
End Function