


Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' Assume colDict is already populated with necessary field codes
    ' Example: colCurrentBalance = colDict("AR67"), colRepaymentType = colDict("RepaymentTypeCode")

    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colDict("AR67")).End(xlUp).Row
    
    ' Variables for aggregate data
    Dim totalBalance As Double, totalInterestPayment As Double, totalPrincipalPayment As Double
    totalBalance = 0
    totalInterestPayment = 0
    totalPrincipalPayment = 0

    Dim i As Long
    For i = 2 To lastRow
        ' Extracting loan data
        Dim currentBalance As Double, repaymentType As String, interestRateType As String, ' other variables
        currentBalance = ws.Cells(i, colDict("AR67")).Value
        repaymentType = ws.Cells(i, colDict("RepaymentTypeCode")).Value ' Replace "RepaymentTypeCode" with actual field code
        ' ... extract other necessary loan data ...

        ' Classify loans based on interest rate type
        ' ... logic to determine interest rate type ...

        ' Calculate loan payments
        Dim monthlyPayment As Double, interestPayment As Double, principalPayment As Double
        ' Basic example using Excel's PMT function
        ' monthlyPayment = Pmt(interestRate / 12, term, -currentBalance)
        ' interestPayment = ... ' Calculation based on the type of loan
        ' principalPayment = ... ' Calculation based on the type of loan

        ' Aggregate the calculations
        totalBalance = totalBalance + currentBalance
        totalInterestPayment = totalInterestPayment + interestPayment
        totalPrincipalPayment = totalPrincipalPayment + principalPayment
    Next i

    ' Output results to a new worksheet or a designated area in the existing worksheet
    ' Example: Output in a new worksheet
    Dim summaryWs As Worksheet
    Set summaryWs = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
    summaryWs.Name = "Portfolio Summary"
    With summaryWs
        .Cells(1, 1).Value = "Total Balance"
        .Cells(1, 2).Value = totalBalance
        .Cells(2, 1).Value = "Total Interest Payment"
        .Cells(2, 2).Value = totalInterestPayment
        .Cells(3, 1).Value = "Total Principal Payment"
        .Cells(3, 2).Value = totalPrincipalPayment
    End With
End Sub
-------
Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' Assuming colDict has necessary mappings
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colDict("AR67")).End(xlUp).Row

    ' Aggregate variables for each type of loan
    Dim totalFixedBalance As Double, totalFloatingBalance As Double, totalFixedToFloatingBalance As Double
    totalFixedBalance = 0
    totalFloatingBalance = 0
    totalFixedToFloatingBalance = 0

    ' Other necessary variables for calculation
    Dim indexRate As Double  ' Assuming this is a known value or retrieved from somewhere
    indexRate = 0.03  ' Example value, replace with actual index rate

    Dim i As Long
    For i = 2 To lastRow
        ' Extract loan data
        Dim currentBalance As Double, interestRateType As String, interestRate As Double, monthlyPayment As Double, remainingTerm As Integer
        currentBalance = ws.Cells(i, colDict("AR67")).Value
        interestRateType = ws.Cells(i, colDict("InterestRateTypeCode")).Value ' Replace with actual field code
        interestRate = ws.Cells(i, colDict("InterestRateCode")).Value ' Replace with actual field code
        remainingTerm = ws.Cells(i, colDict("RemainingTermCode")).Value ' Replace with actual field code

        ' Initialize variables for each loan
        Dim totalInterestThisLoan As Double, totalPrincipalThisLoan As Double
        totalInterestThisLoan = 0
        totalPrincipalThisLoan = 0

        Select Case interestRateType
            Case "Fixed"
                monthlyPayment = Pmt(interestRate / 12, remainingTerm, -currentBalance)
                ' Simplified fixed-rate loan calculations
                Dim month As Integer
                For month = 1 To remainingTerm
                    Dim interestThisMonth As Double
                    interestThisMonth = currentBalance * (interestRate / 12)
                    Dim principalThisMonth As Double
                    principalThisMonth = monthlyPayment - interestThisMonth
                    currentBalance = currentBalance - principalThisMonth

                    totalInterestThisLoan = totalInterestThisLoan + interestThisMonth
                    totalPrincipalThisLoan = totalPrincipalThisLoan + principalThisMonth
                Next month
                totalFixedBalance = totalFixedBalance + currentBalance

            Case "Floating"
                ' Assuming the interest rate for floating loans is indexRate + margin
                Dim margin As Double
                margin = ws.Cells(i, colDict("MarginCode")).Value ' Replace with actual field code
                ' Floating-rate loan calculations with changing interest rate
                For month = 1 To remainingTerm
                    interestRate = indexRate + margin
                    monthlyPayment = Pmt(interestRate / 12, remainingTerm - month + 1, -currentBalance)
                    interestThisMonth = currentBalance * (interestRate / 12)
                    principalThisMonth = monthlyPayment - interestThisMonth
                    currentBalance = currentBalance - principalThisMonth

                    totalInterestThisLoan = totalInterestThisLoan + interestThisMonth
                    totalPrincipalThisLoan = totalPrincipalThisLoan + principalThisMonth
                Next month
                totalFloatingBalance = totalFloatingBalance + currentBalance

            Case "FixedToFloating"
                ' Additional logic to determine whether the loan is currently in fixed or floating period
                ' ... Logic for determining the period ...
                ' Then perform similar calculations as above for either fixed or floating period
                ' ...
                totalFixedToFloatingBalance = totalFixedToFloatingBalance + currentBalance
        End Select
    Next i

    ' Output aggregated results
    ' ... Output total balances and other aggregate metrics ...
End Sub



======

Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' Assuming colDict has necessary mappings
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colDict("AR67")).End(xlUp).Row

    ' Variables for aggregate data, categorized by interest rate type
    Dim totalFixedBalance As Double, totalFloatingBalance As Double, totalFixedToFloatingBalance As Double
    totalFixedBalance = 0
    totalFloatingBalance = 0
    totalFixedToFloatingBalance = 0

    ' Pool cut-off date
    Dim poolCutOffDate As Date
    poolCutOffDate = ws.Cells(2, colDict("AR1")).Value  ' Assuming the same date is used for all loans

    Dim i As Long
    For i = 2 To lastRow
        ' Extract loan data
        Dim currentBalance As Double, interestRateType As String, interestRate As Double, monthlyPayment As Double, remainingTerm As Integer
        currentBalance = ws.Cells(i, colDict("AR67")).Value
        interestRateType = ws.Cells(i, colDict("InterestRateTypeCode")).Value ' Replace with actual field code
        interestRate = ws.Cells(i, colDict("InterestRateCode")).Value ' Replace with actual field code
        remainingTerm = ws.Cells(i, colDict("RemainingTermCode")).Value ' Replace with actual field code

        ' Initialize variables for each loan
        Dim totalInterestThisLoan As Double, totalPrincipalThisLoan As Double
        totalInterestThisLoan = 0
        totalPrincipalThisLoan = 0

        Select Case interestRateType
            Case "Fixed"
                ' Perform calculations for fixed rate loans (same as previous code)

            Case "Floating"
                ' Perform calculations for floating rate loans (same as previous code)

            Case "FixedToFloating"
                ' Retrieve reversion date and margin
                Dim reversionDate As Date, postReversionMargin As Double
                reversionDate = ws.Cells(i, colDict("AR121")).Value
                postReversionMargin = ws.Cells(i, colDict("AR120")).Value

                ' Determine if in fixed or floating period
                Dim monthsUntilReversion As Integer
                monthsUntilReversion = DateDiff("m", poolCutOffDate, reversionDate)

                ' Perform calculations for fixed period
                For month = 1 To Min(monthsUntilReversion, remainingTerm)
                    ' Fixed period calculations (same as in "Fixed" case)
                Next month

                ' Perform calculations for floating period if applicable
                If remainingTerm > monthsUntilReversion Then
                    For month = monthsUntilReversion + 1 To remainingTerm
                        ' Adjust interest rate based on post-reversion margin
                        interestRate = indexRate + postReversionMargin
                        ' Floating period calculations (same as in "Floating" case)
                    Next month
                End If

                totalFixedToFloatingBalance = totalFixedToFloatingBalance + currentBalance

            ' ... Handle other cases or default ...
        End Select
    Next i

    ' Output aggregated results (same as previous code)
End Sub

' Helper Function to find the minimum of two values
Function Min(val1 As Integer, val2 As Integer) As Integer
    If val1 < val2 Then
        Min = val1
    Else
        Min = val2
    End If
End Function
---------
Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' ... [previous code initialization] ...

    Dim i As Long
    For i = 2 To lastRow
        ' Extract loan data
        Dim currentBalance As Double, interestRateType As String, repaymentType As Integer
        Dim interestRate As Double, monthlyPayment As Double, remainingTerm As Integer
        currentBalance = ws.Cells(i, colDict("AR67")).Value
        interestRateType = ws.Cells(i, colDict("InterestRateTypeCode")).Value
        repaymentType = ws.Cells(i, colDict("AR69")).Value
        ' ... [other data extraction] ...

        ' Initialize variables for each loan
        Dim totalInterestThisLoan As Double, totalPrincipalThisLoan As Double
        totalInterestThisLoan = 0
        totalPrincipalThisLoan = 0

        Select Case interestRateType
            Case "Fixed", "Floating", "FixedToFloating"
                ' Determine if loan is in fixed or floating period
                ' ... [logic for fixed to floating] ...

                ' Iterate over each payment period
                For month = 1 To remainingTerm
                    ' Determine the monthly interest rate
                    Dim monthlyInterestRate As Double
                    monthlyInterestRate = interestRate / 12 ' Adjust this based on the loan's current interest rate status

                    ' Calculate monthly interest
                    Dim interestThisMonth As Double
                    interestThisMonth = currentBalance * monthlyInterestRate

                    ' Determine payment based on repayment type
                    Select Case repaymentType
                        Case 1 ' Interest Only
                            monthlyPayment = interestThisMonth
                            ' Principal remains unchanged until the end for interest-only loans

                        Case 2 ' Amortizing
                            ' Calculate monthly payment if not already provided
                            If month = 1 Or interestRateType = "FixedToFloating" Then
                                ' Recalculate payment if it's the first month or if the loan type changes
                                monthlyPayment = Pmt(monthlyInterestRate, remainingTerm - month + 1, -currentBalance)
                            End If
                            ' Calculate principal part of the payment
                            Dim principalThisMonth As Double
                            principalThisMonth = monthlyPayment - interestThisMonth
                            currentBalance = currentBalance - principalThisMonth
                            totalPrincipalThisLoan = totalPrincipalThisLoan + principalThisMonth

                    End Select

                    ' Aggregate interest for this loan
                    totalInterestThisLoan = totalInterestThisLoan + interestThisMonth
                Next month

                ' Aggregate totals based on loan type
                Select Case interestRateType
                    Case "Fixed"
                        totalFixedBalance = totalFixedBalance + currentBalance

                    Case "Floating"
                        totalFloatingBalance = totalFloatingBalance + currentBalance

                    Case "FixedToFloating"
                        totalFixedToFloatingBalance = totalFixedToFloatingBalance + currentBalance

                End Select

        End Select
    Next i

    ' ... [output aggregated results] ...
End Sub
----------
Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' Assuming colDict has necessary mappings
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colDict("AR67")).End(xlUp).Row

    ' Variables for aggregate data, categorized by interest rate type
    Dim totalFixedBalance As Double, totalFloatingBalance As Double, totalFixedToFloatingBalance As Double
    totalFixedBalance = 0
    totalFloatingBalance = 0
    totalFixedToFloatingBalance = 0

    ' Retrieve the pool cut-off date
    Dim poolCutOffDate As Date
    poolCutOffDate = ws.Cells(2, colDict("AR1")).Value ' Assuming same cut-off date for all loans

    Dim i As Long
    For i = 2 To lastRow
        ' Extract loan data
        Dim currentBalance As Double, interestRateType As String, repaymentType As Integer
        Dim interestRate As Double, monthlyPayment As Double, remainingTerm As Integer
        currentBalance = ws.Cells(i, colDict("AR67")).Value
        interestRateType = ws.Cells(i, colDict("InterestRateTypeCode")).Value
        repaymentType = ws.Cells(i, colDict("AR69")).Value
        ' ... [other data extraction] ...

        ' Initialize variables for each loan
        Dim totalInterestThisLoan As Double, totalPrincipalThisLoan As Double
        totalInterestThisLoan = 0
        totalPrincipalThisLoan = 0

        ' Determine interest rate type and period for Fixed to Floating loans
        Dim isFixedPeriod As Boolean
        isFixedPeriod = True ' Default to True
        If interestRateType = "FixedToFloating" Then
            Dim reversionDate As Date, postReversionMargin As Double
            reversionDate = ws.Cells(i, colDict("AR121")).Value
            postReversionMargin = ws.Cells(i, colDict("AR120")).Value
            If poolCutOffDate >= reversionDate Then
                isFixedPeriod = False ' Loan is in floating period
                interestRate = indexRate + postReversionMargin ' Adjust interest rate post-reversion
            End If
        End If

        ' Iterating over each payment period
        For month = 1 To remainingTerm
            ' Determine the monthly interest rate
            Dim monthlyInterestRate As Double
            monthlyInterestRate = interestRate / 12 ' Adjust this based on the loan's current interest rate status

            ' Calculate monthly interest
            Dim interestThisMonth As Double
            interestThisMonth = currentBalance * monthlyInterestRate

            ' Determine payment based on repayment type
            Select Case repaymentType
                Case 1 ' Interest Only
                    monthlyPayment = interestThisMonth
                    ' Principal remains unchanged until the end for interest-only loans

                Case 2 ' Amortizing
                    ' Calculate monthly payment if not already provided
                    If month = 1 Or interestRateType = "FixedToFloating" And Not isFixedPeriod Then
                        ' Recalculate payment if it's the first month or if the loan type changes
                        monthlyPayment = Pmt(monthlyInterestRate, remainingTerm - month + 1, -currentBalance)
                    End If
                    ' Calculate principal part of the payment
                    Dim principalThisMonth As Double
                    principalThisMonth = monthlyPayment - interestThisMonth
                    currentBalance = currentBalance - principalThisMonth
                    totalPrincipalThisLoan = totalPrincipalThisLoan + principalThisMonth

            End Select

            ' Aggregate interest for this loan
            totalInterestThisLoan = totalInterestThisLoan + interestThisMonth
        Next month

        ' Aggregate totals based on loan type
        Select Case interestRateType
            Case "Fixed"
                totalFixedBalance = totalFixedBalance + currentBalance

            Case "Floating"
                totalFloatingBalance = totalFloatingBalance + currentBalance

            Case "FixedToFloating"
                totalFixedToFloatingBalance = totalFixedToFloatingBalance + currentBalance

        End Select
    Next i

    ' Output aggregated results
    ' ... Output total balances and other aggregate metrics ...
End Sub

---

Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' ... [previous code initialization] ...

    ' Additional variables for fixed to floating aggregates
    Dim totalFixedToFloatingFixedPeriodBalance As Double, totalFixedToFloatingFloatingPeriodBalance As Double
    totalFixedToFloatingFixedPeriodBalance = 0
    totalFixedToFloatingFloatingPeriodBalance = 0

    ' ... [rest of the initialization] ...

    Dim i As Long
    For i = 2 To lastRow
        ' ... [extract loan data] ...

        ' ... [rest of the code for loan analysis] ...

        ' Aggregate totals based on loan type and period for FixedToFloating
        If interestRateType = "FixedToFloating" Then
            If isFixedPeriod Then
                totalFixedToFloatingFixedPeriodBalance = totalFixedToFloatingFixedPeriodBalance + currentBalance
            Else
                totalFixedToFloatingFloatingPeriodBalance = totalFixedToFloatingFloatingPeriodBalance + currentBalance
            End If
        End If

        ' ... [rest of the aggregation for other loan types] ...
    Next i

    ' Output aggregated results to "Outputs" tab
    Dim outputWs As Worksheet
    On Error Resume Next
    Set outputWs = ThisWorkbook.Sheets("Outputs")
    If outputWs Is Nothing Then
        Set outputWs = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        outputWs.Name = "Outputs"
    End If
    On Error GoTo 0
    outputWs.Cells.Clear

    With outputWs
        .Cells(1, 1).Value = "Total Fixed Balance"
        .Cells(1, 2).Value = totalFixedBalance
        .Cells(2, 1).Value = "Total Floating Balance"
        .Cells(2, 2).Value = totalFloatingBalance
        .Cells(3, 1).Value = "Total Fixed to Floating (Fixed Period) Balance"
        .Cells(3, 2).Value = totalFixedToFloatingFixedPeriodBalance
        .Cells(4, 1).Value = "Total Fixed to Floating (Floating Period) Balance"
        .Cells(4, 2).Value = totalFixedToFloatingFloatingPeriodBalance
        ' ... Add more rows for other aggregates ...
    End With
End Sub

----
Sub AnalyzeLoanPool(ws As Worksheet, colDict As Object)
    ' ... [previous code initialization] ...

    ' Dictionary to store aggregates for each period
    Dim periodAggregates As Object
    Set periodAggregates = CreateObject("Scripting.Dictionary")

    Dim i As Long, month As Integer
    For i = 2 To lastRow
        ' ... [extract loan data] ...

        ' ... [rest of the code for loan analysis] ...

        ' Iterate over each payment period and update period aggregates
        For month = 1 To remainingTerm
            ' ... [perform calculations for each loan type and period] ...

            ' Update period aggregates
            If Not periodAggregates.Exists(month) Then
                ' Initialize with zeros for Fixed, Floating, FixedToFloatingFixed, FixedToFloatingFloating
                periodAggregates.Add month, Array(0, 0, 0, 0) 
            End If

            ' Update aggregates based on loan type and period
            Dim currentPeriodData As Variant
            currentPeriodData = periodAggregates(month)

            Select Case interestRateType
                Case "Fixed"
                    currentPeriodData(0) = currentPeriodData(0) + currentBalance ' Update fixed
                Case "Floating"
                    currentPeriodData(1) = currentPeriodData(1) + currentBalance ' Update floating
                Case "FixedToFloating"
                    If isFixedPeriod Then
                        currentPeriodData(2) = currentPeriodData(2) + currentBalance ' Update fixed period of FixedToFloating
                    Else
                        currentPeriodData(3) = currentPeriodData(3) + currentBalance ' Update floating period of FixedToFloating
                    End If
            End Select

            periodAggregates(month) = currentPeriodData
        Next month
    Next i

    ' Output aggregated results to "Outputs" tab
    ' ... [code to set up or clear the Outputs worksheet] ...

    With outputWs
        .Cells(1, 1).Value = "Period"
        .Cells(1, 2).Value = "Total Fixed Balance"
        .Cells(1, 3).Value = "Total Floating Balance"
        .Cells(1, 4).Value = "Total Fixed to Floating (Fixed Period) Balance"
        .Cells(1, 5).Value = "Total Fixed to Floating (Floating Period) Balance"

        Dim periodKey As Variant
        Dim row As Integer
        row = 2 ' Start from the second row for data
        For Each periodKey In periodAggregates.Keys
            .Cells(row, 1).Value = periodKey
            .Cells(row, 2).Value = periodAggregates(periodKey)(0) ' Fixed
            .Cells(row, 3).Value = periodAggregates(periodKey)(1) ' Floating
            .Cells(row, 4).Value = periodAggregates(periodKey)(2) ' FixedToFloatingFixed
            .Cells(row, 5).Value = periodAggregates(periodKey)(3) ' FixedToFloatingFloating
            row = row + 1
        Next periodKey
    End With
End Sub


-----




