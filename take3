Public Sub StratifyData(ws As Worksheet, colDict As Object, fieldCode As String, OutputSheetName As String, TableTitle As String, StratificationMode As String, Optional FieldInfo As CFieldValidationInfo)

    Dim IsCalculatedField As Boolean
    Dim BucketDict As Object
    Dim fieldValue As Variant
    Dim buckets() As Double
    Dim i As Long, j As Long, r As Long
    Dim bucketKey As String
    Dim currentBalance As Double
    Dim remainingTerm As Double, seasoning As Double
    Dim underflowBucketKey As String, overflowBucketKey As String

    ' New Variables for Compression Filtering
    Dim filteredDict As Object
    Dim loanData As Variant
    Dim loanBalance As Double, loanMargin As Double
    Dim interestRateType As Integer, reversionDate As Date
    Dim outputWs As Worksheet
    Dim rowCounter As Long, totalBalance As Double, weightedMarginSum As Double

    ' Initialize Dictionaries
    Set BucketDict = CreateObject("Scripting.Dictionary")
    Set filteredDict = CreateObject("Scripting.Dictionary")
    
    totalBalance = 0
    weightedMarginSum = 0

    IsCalculatedField = (fieldCode = "Remaining Term" Or fieldCode = "Seasoning" Or fieldCode = "Year of Origination" Or fieldCode = "Time to Reversion")

    ' Handle Calculated Fields or Data Validation
    If Not IsCalculatedField Then
        If Not colDict.Exists(fieldCode) Then
            MsgBox "Field code " & fieldCode & " not found in the dataset."
            Exit Sub
        End If
    End If

    ' Get Column Numbers
    Dim colnumber As Integer
    colnumber = colDict(fieldCode)
    Dim colCurrentBalance As Integer
    colCurrentBalance = colDict("AR67") ' Current Balance Column

    ' Initialize Buckets for Stratification
    If StratificationMode = "Numerical" Then
        Dim WAvg As Double, stepInterval As Double, numbuckets As Integer
        WAvg = SummaryStats(fieldCode & "_WAvg")
        stepInterval = CRUp(WAvg)
        numbuckets = Int(WAvg / stepInterval) + 5
        ReDim buckets(0 To numbuckets)
        For j = 0 To numbuckets
            buckets(j) = 0 + (j * stepInterval)
        Next j
    End If

    ' Prepare Buckets
    If StratificationMode = "Numerical" Then
        underflowBucketKey = "<" & buckets(LBound(buckets))
        overflowBucketKey = ">" & buckets(UBound(buckets))
        BucketDict.Add underflowBucketKey, New Collection
        For i = LBound(buckets) To UBound(buckets) - 1
            bucketKey = buckets(i) & "-" & buckets(i + 1)
            BucketDict.Add bucketKey, New Collection
        Next i
        BucketDict.Add overflowBucketKey, New Collection
    End If

    ' Loop Through Data to Assign Buckets
    For r = startRow To lastRow
        If filter = True And ws.Rows(r).EntireRow.Hidden Then GoTo ContinueLoop

        currentBalance = ws.Cells(r, colCurrentBalance).Value

        If IsCalculatedField Then
            Select Case fieldCode
                Case "Remaining Term"
                    remainingTerm = DateDiff("m", pcd, ws.Cells(r, colDict("AR56")).Value)
                    fieldValue = remainingTerm
                Case "Seasoning"
                    seasoning = DateDiff("yyyy", ws.Cells(r, colDict("AR55")).Value, pcd)
                    fieldValue = seasoning
                ' Add other calculated fields here if needed
            End Select
        Else
            fieldValue = ws.Cells(r, colnumber).Value
        End If

        ' Assign to Buckets
        If StratificationMode = "Numerical" Then
            If fieldValue < buckets(LBound(buckets)) Then
                BucketDict(underflowBucketKey).Add Array(r, currentBalance)
            ElseIf fieldValue >= buckets(UBound(buckets)) Then
                BucketDict(overflowBucketKey).Add Array(r, currentBalance)
            Else
                For i = LBound(buckets) To UBound(buckets) - 1
                    If fieldValue >= buckets(i) And fieldValue < buckets(i + 1) Then
                        bucketKey = buckets(i) & "-" & buckets(i + 1)
                        BucketDict(bucketKey).Add Array(r, currentBalance)
                        Exit For
                    End If
                Next i
            End If
        End If

ContinueLoop:
    Next r

    ' New Logic for AR110 Field (Floating Loan Filtering)
    If fieldCode = "AR110" Then
        For Each bucketKey In BucketDict.Keys
            For Each loanData In BucketDict(bucketKey)
                loanBalance = loanData(1)
                loanMargin = ws.Cells(loanData(0), colDict("AR110")).Value
                interestRateType = ws.Cells(loanData(0), colDict("AR107")).Value
                reversionDate = ws.Cells(loanData(0), colDict("AR121")).Value

                ' Floating Loans or Fixed-to-Floating in Floating Period
                If (interestRateType = 1) Or (interestRateType = 5 And IsDate(reversionDate) And reversionDate <= pcd) Then
                    If Not filteredDict.Exists(bucketKey) Then
                        filteredDict.Add bucketKey, New Collection
                    End If
                    filteredDict(bucketKey).Add Array(loanData(0), loanBalance, loanMargin)
                End If
            Next loanData
        Next bucketKey

        ' Output Filtered Loans to "Compression" Tab
        Set outputWs = ThisWorkbook.Sheets("Compression")
        outputWs.Cells.Clear
        rowCounter = 1

       ' Headers
        outputWs.Cells(rowCounter, 1).Value = "Loan ID"
        outputWs.Cells(rowCounter, 2).Value = "Loan Balance"
        outputWs.Cells(rowCounter, 3).Value = "Loan Margin"
        rowCounter = rowCounter + 1

        ' Populate Data
        For Each bucketKey In filteredDict.Keys
            For Each loanData In filteredDict(bucketKey)
                outputWs.Cells(rowCounter, 1).Value = loanData(0) ' Loan ID (row index in this case)
                outputWs.Cells(rowCounter, 2).Value = loanData(1) ' Loan Balance
                outputWs.Cells(rowCounter, 3).Value = loanData(2) ' Loan Margin
                totalBalance = totalBalance + loanData(1)
                weightedMarginSum = weightedMarginSum + (loanData(1) * loanData(2))
                rowCounter = rowCounter + 1
            Next loanData
        Next bucketKey

        ' Summary Section
        rowCounter = rowCounter + 2
        outputWs.Cells(rowCounter, 1).Value = "Summary"
        outputWs.Cells(rowCounter + 1, 1).Value = "Total Balance"
        outputWs.Cells(rowCounter + 1, 2).Value = totalBalance
        outputWs.Cells(rowCounter + 2, 1).Value = "Weighted Average Margin"
        If totalBalance > 0 Then
            outputWs.Cells(rowCounter + 2, 2).Value = weightedMarginSum / totalBalance
        Else
            outputWs.Cells(rowCounter + 2, 2).Value = 0
        End If

        ' Format Output
        outputWs.Columns.AutoFit
    End If

    ' Original Stratification Output (for AR110 and other fields)
    Call OutputMod.OutputBuckets(ws, BucketDict, OutputSheetName, TableTitle)
End Sub

----------------v2----------------







Sub StratifyData(ws As Worksheet, colDict As Object, fieldCode As String, OutputSheetName As String, TableTitle As String, StratificationMode As String, Optional FieldInfo As CFieldValidationInfo)
    Dim IsCalculatedField As Boolean
    Dim IsListField As Boolean
    Dim uniqueItems As Scripting.Dictionary
    Dim fieldValue As Variant
    Dim buckets() As Double
    Dim range As Double, stepInterval As Double
    Dim totalBalance, weightedMarginSum As Double
    Dim loanData As Collection
    Dim filteredDict As Object
    Dim prepayBalance, prepayTarget As Double
    Dim remainingBalance, remainingMarginSum As Double
    Dim floatingLoans As Collection
    Dim loanRow As Variant
    Dim loanBalance, loanMargin As Double
    Dim outputWs As Worksheet
    Dim ControlWs As Worksheet
    Dim CPR As Double, HYShare As Double
    Dim rowCounter As Long

    ' Initialize Variables
    Set filteredDict = CreateObject("Scripting.Dictionary")
    Set floatingLoans = New Collection
    totalBalance = 0
    weightedMarginSum = 0
    remainingBalance = 0
    remainingMarginSum = 0

    ' Inputs from Control Tab
    Set ControlWs = ThisWorkbook.Sheets("Control")
    CPR = ControlWs.Cells(1, 9).Value
    HYShare = ControlWs.Cells(1, 10).Value

    ' Only process AR110
    If fieldCode = "AR110" Then
        ' Filter for floating loans
        For Each bucketKey In BucketDict.Keys
            For Each loanData In BucketDict(bucketKey)
                loanRow = loanData(0)
                loanBalance = loanData(1)
                loanMargin = loanData(2)

                ' Check if loan is floating or fixed-to-floating in floating period
                If ws.Cells(loanRow, colDict("AR107")).Value = 1 Or _
                   (ws.Cells(loanRow, colDict("AR107")).Value = 5 And _
                    ws.Cells(loanRow, colDict("AR121")).Value < pcd) Then
                    floatingLoans.Add Array(loanRow, loanBalance, loanMargin)
                End If
            Next loanData
        Next bucketKey

        ' Sort floating loans by margin (descending)
        Dim tempLoan As Variant, i As Long, j As Long
        For i = 1 To floatingLoans.Count - 1
            For j = i + 1 To floatingLoans.Count
                If floatingLoans(i)(2) < floatingLoans(j)(2) Then
                    Set tempLoan = floatingLoans(i)
                    floatingLoans(i) = floatingLoans(j)
                    floatingLoans(j) = tempLoan
                End If
            Next j
        Next i

        ' Calculate prepayment target
        totalBalance = 0
        For Each loanData In floatingLoans
            totalBalance = totalBalance + loanData(1)
        Next loanData

        prepayTarget = CPR * HYShare * totalBalance

        ' Prepay highest-yielding loans
        For Each loanData In floatingLoans
            loanBalance = loanData(1)
            loanMargin = loanData(2)

            If prepayTarget > 0 Then
                If loanBalance <= prepayTarget Then
                    ' Prepay entire loan
                    prepayTarget = prepayTarget - loanBalance
                Else
                    ' Partial prepayment
                    loanBalance = loanBalance - prepayTarget
                    prepayTarget = 0
                End If
            End If

            ' Add remaining balance to new pool
            If loanBalance > 0 Then
                remainingBalance = remainingBalance + loanBalance
                remainingMarginSum = remainingMarginSum + (loanBalance * loanMargin)
            End If
        Next loanData

        ' Output to "Compression" Tab
        On Error Resume Next
        Set outputWs = ThisWorkbook.Sheets("Compression")
        On Error GoTo 0
        If outputWs Is Nothing Then
            Set outputWs = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
            outputWs.Name = "Compression"
        Else
            outputWs.Cells.Clear
        End If

        ' Headers
        rowCounter = 1
        outputWs.Cells(rowCounter, 1).Value = "Loan ID"
        outputWs.Cells(rowCounter, 2).Value = "Loan Balance"
        outputWs.Cells(rowCounter, 3).Value = "Loan Margin"
        rowCounter = rowCounter + 1

        ' Populate Remaining Pool
        For Each loanData In floatingLoans
            outputWs.Cells(rowCounter, 1).Value = loanData(0) ' Loan ID
            outputWs.Cells(rowCounter, 2).Value = loanData(1) ' Remaining Loan Balance
            outputWs.Cells(rowCounter, 3).Value = loanData(2) ' Loan Margin
            rowCounter = rowCounter + 1
        Next loanData

        ' Summary
        rowCounter = rowCounter + 2
        outputWs.Cells(rowCounter, 1).Value = "Summary"
        outputWs.Cells(rowCounter + 1, 1).Value = "Total Remaining Balance"
        outputWs.Cells(rowCounter + 1, 2).Value = remainingBalance
        outputWs.Cells(rowCounter + 2, 1).Value = "Post-Compression WA Margin"
        If remainingBalance > 0 Then
            outputWs.Cells(rowCounter + 2, 2).Value = remainingMarginSum / remainingBalance
        Else
            outputWs.Cells(rowCounter + 2, 2).Value = 0
        End If

        ' Format Output
        outputWs.Columns.AutoFit
    End If

    ' Call original stratification routine
    Call OutputMod.OutputBuckets(ws, BucketDict, OutputSheetName, TableTitle)
End Sub



----------v3 full---------

Public Sub StratifyData(ws As Worksheet, colDict As Object, fieldCode As String, OutputSheetName As String, TableTitle As String, StratificationMode As String, Optional FieldInfo As CFieldValidationInfo)
    Dim IsCalculatedField As Boolean
    Dim IsListField As Boolean
    Dim uniqueItems As Scripting.Dictionary
    Dim fieldValue As Variant
    Dim buckets() As Double
    Dim range As Double, stepInterval As Double
    Dim floatingLoans As Collection
    Dim compressionWs As Worksheet
    
    IsCalculatedField = (fieldCode = "Remaining Term" Or fieldCode = "Seasoning" Or fieldCode = "Year of Origination" Or fieldCode = "Time to Reversion")
    
    If FieldInfo.DataType = "List" Then
        Set uniqueItems = CreateObject("Scripting.Dictionary")
        IsListField = True
    End If

    If Not IsCalculatedField Then
        If Not colDict.Exists(fieldCode) Then
            MsgBox "Field code " & fieldCode & " not found in the dataset."
            Exit Sub
        End If
    End If
    
    Dim colnumber As Integer
    colnumber = colDict.item(fieldCode)
    Dim colCurrentBalance As Integer
    colCurrentBalance = colDict.item("AR67")
    Dim remainingTerm As Double
    Dim seasoning As Double
    
    Dim BucketDict As Object
    Set BucketDict = CreateObject("Scripting.Dictionary")
    
    Dim i As Long, j As Long, r As Long
    Dim BucketKey As String

    If FieldInfo.DataType = "Numeric" And StratificationMode <> "Categorical" And fieldCode <> "AR170" Then
        Dim WAvg As Double
        Dim IsPct As Boolean
        IsPct = False
        
        WAvg = SummaryStats(fieldCode & "_WAvg")
        
        If WAvg < 1 And WAvg > 0 Then
           IsPct = True
        End If
        
        range = WAvg
        
        If range = 0 Then Exit Sub
        
        stepInterval = CRUp(range)
        numbuckets = Int(range / stepInterval) + 5
        ReDim buckets(0 To numbuckets)
        
        For j = 0 To numbuckets
            buckets(j) = 0 + (j * stepInterval)
        Next j
        
    ElseIf IsListField Then
        On Error Resume Next
        For r = startRow To lastRow
            fieldValue = ws.Cells(r, colnumber).value
            If Not uniqueItems.Exists(fieldValue) Then
                uniqueItems.Add fieldValue, CStr(fieldValue)
            End If
        Next r
        On Error GoTo 0
        
        For Each item In uniqueItems
            BucketDict.Add CStr(item), New collection
        Next item
        numbuckets = uniqueItems.Count
        ReDim buckets(0 To numbuckets)
        
    ElseIf StratificationMode = "Date" And fieldCode = "Year of Origination" Then
        Set uniqueItems = CreateObject("Scripting.Dictionary")
        On Error Resume Next
        For r = startRow To lastRow
            OriginationDate = ws.Cells(r, colDict.item("AR55")).value
            fieldValue = Year(OriginationDate)
            If Not uniqueItems.Exists(fieldValue) Then
                uniqueItems.Add fieldValue, CStr(fieldValue)
            End If
        Next r
        On Error GoTo 0
        
        For Each item In uniqueItems
            BucketDict.Add CStr(item), New collection
        Next item
        numbuckets = uniqueItems.Count
        ReDim buckets(0 To numbuckets)
    End If

    If fieldCode = "AR170" Or fieldCode = "AR31" Or fieldCode = "AR33" Then
        numbuckets = 10
        ReDim buckets(0 To numbuckets)
        For j = 0 To numbuckets
            buckets(j) = 0 + j
        Next j
    End If

    If StratificationMode = "Categorical" And Not IsListField Then
        For i = LBound(buckets) To UBound(buckets)
            BucketKey = CStr(buckets(i))
            BucketDict.Add BucketKey, New collection
        Next i
    ElseIf StratificationMode = "Numerical" Then
        Dim underflowBucketKey As String
        underflowBucketKey = "<" & buckets(LBound(buckets))
        BucketDict.Add underflowBucketKey, New collection
        
        For i = LBound(buckets) To UBound(buckets) - 1
            BucketKey = buckets(i) & "-" & buckets(i + 1)
            BucketDict.Add BucketKey, New collection
        Next i
        
        Dim overflowBucketKey As String
        overflowBucketKey = ">" & buckets(UBound(buckets))
        BucketDict.Add overflowBucketKey, New collection
    End If

    Dim currentBalance As Double
    
    For r = startRow To lastRow
        If filter = True And ws.Rows(r).EntireRow.Hidden Then GoTo ContinueLoop
        currentBalance = ws.Cells(r, colCurrentBalance).value
        If IsCalculatedField Then
            Select Case fieldCode
            Case "Remaining Term"
                maturityDate = ws.Cells(r, colDict.item("AR56")).value
                remainingTerm = DateDiff("m", pcd, maturityDate)
                fieldValue = remainingTerm
            Case "Seasoning"
                OriginationDate = ws.Cells(r, colDict.item("AR55")).value
                seasoning = DateDiff("yyyy", OriginationDate, pcd)
                fieldValue = seasoning
            Case "Year of Origination"
                OriginationDate = ws.Cells(r, colDict.item("AR55")).value
                fieldValue = Year(OriginationDate)
            Case "Time to Reversion"
                reversionDate = ws.Cells(r, colDict.item("AR121")).value
                If reversionDate <> "00/01/1900" And reversionDate <> "" Then
                    TimeToReversion = DateDiff("yyyy", pcd, reversionDate)
                    fieldValue = TimeToReversion
                Else
                    fieldValue = 0
                End If
            End Select
        Else
            fieldValue = ws.Cells(r, colnumber).value
        End If

        Dim bucketFound As Boolean
        bucketFound = False
        
        Select Case StratificationMode
        Case "Categorical"
            Dim stringvalue As String
            stringvalue = CStr(fieldValue)
            If BucketDict.Exists(stringvalue) Then
                BucketDict.item(stringvalue).Add Array(r, currentBalance)
                bucketFound = True
            End If
        Case "Numerical"
            If StratificationMode = "Date" And IsDate(fieldValue) And fieldCode <> "Year of Origination" Then
                fieldValue = Year(fieldValue)
            End If
            If BucketDict.Exists(fieldValue) Then
                BucketDict.item(fieldValue).Add Array(r, currentBalance)
                bucketFound = True
            End If
            If Not bucketFound And fieldValue < buckets(LBound(buckets)) Then
                BucketDict.item(underflowBucketKey).Add Array(r, currentBalance)
            End If
            For i = LBound(buckets) To UBound(buckets) - 1
                If fieldValue >= buckets(i) And fieldValue < buckets(i + 1) Then
                    BucketKey = buckets(i) & "-" & buckets(i + 1)
                    BucketDict.item(BucketKey).Add Array(r, currentBalance)
                    bucketFound = True
                    Exit For
                End If
            Next i
            If Not bucketFound And fieldValue >= buckets(UBound(buckets)) Then
                BucketDict.item(overflowBucketKey).Add Array(r, currentBalance)
            End If
        End Select
ContinueLoop:
    Next r

    Call OutputMod.OutputBuckets(ws, BucketDict, OutputSheetName, TableTitle)

    If fieldCode = "AR110" Then
        Call ProcessFloatingLoans(ws, colDict)
    End If
End Sub

Sub ProcessFloatingLoans(ws As Worksheet, colDict As Object)
    Dim floatingLoans As Collection
    Dim compressionWs As Worksheet
    Dim rowCounter As Integer
    Dim totalBalance As Double
    Dim totalMargin As Double
    Dim currentLoanBalance As Double
    Dim currentMargin As Double
    Dim interestRateType As Integer

    Set floatingLoans = New Collection
    Set compressionWs = ThisWorkbook.Sheets.Add
    compressionWs.Name = "Compression"

    rowCounter = 1

    compressionWs.Cells(rowCounter, 1).Value = "Loan Balance"
    compressionWs.Cells(rowCounter, 2).Value = "Loan Margin"

    totalBalance = 0
    totalMargin = 0

    For i = startRow To lastRow
        interestRateType = ws.Cells(i, colDict("AR107")).Value
        currentLoanBalance = ws.Cells(i, colDict("AR67")).Value
        currentMargin = ws.Cells(i, colDict("AR110")).Value

        If interestRateType = 1 Or (interestRateType = 5 And IsLoanInFloatingPeriod(ws, i, colDict)) Then
            floatingLoans.Add Array(currentLoanBalance, currentMargin)
            compressionWs.Cells(rowCounter + 1, 1).Value = currentLoanBalance
            compressionWs.Cells(rowCounter + 1, 2).Value = currentMargin

            totalBalance = totalBalance + currentLoanBalance
            totalMargin = totalMargin + (currentLoanBalance * currentMargin)
            rowCounter = rowCounter + 1
        End If
    Next i

    compressionWs.Cells(rowCounter + 2, 1).Value = "WA Margin"
    compressionWs.Cells(rowCounter + 2, 2).Value = totalMargin / totalBalance
End Sub

Function IsLoanInFloatingPeriod(ws As Worksheet, row As Long, colDict As Object) As Boolean
    Dim reversionDate As Date
    reversionDate = ws.Cells(row, colDict("AR121")).Value
    IsLoanInFloatingPeriod = reversionDate <= pcd
End Function

