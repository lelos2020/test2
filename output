Sub OutputBuckets(sourceWs As Worksheet, BucketDict As Object, outputSheetName As String, TableTitle As String)
    Dim outputWs As Worksheet
    On Error Resume Next
    Set outputWs = ThisWorkbook.Sheets(outputSheetName)
    On Error GoTo 0

    ' Create or clear the output worksheet
    If outputWs Is Nothing Then
        Set outputWs = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        outputWs.Name = outputSheetName
    Else
        outputWs.Cells.Clear
    End If

    ' Find the first empty row
    Dim firstEmptyRow As Long
    firstEmptyRow = outputWs.Cells(outputWs.Rows.Count, 1).End(xlUp).Row + 1
    If firstEmptyRow <> 1 Or outputWs.Cells(1, 1).Value <> "" Then
        firstEmptyRow = firstEmptyRow + 2
    End If

    Dim BucketRange As Variant
    Dim rowCounter As Long
    rowCounter = firstEmptyRow
    Dim TotalPoolBalance As Double
    TotalPoolBalance = 0

    ' Output the table title
    outputWs.Cells(rowCounter - 1, 1).Value = TableTitle

    ' Process and output data for each bucket
    For Each BucketRange In BucketDict.Keys
        ' Initialize sum for each bucket
        Dim totalCurrentBalance As Double
        totalCurrentBalance = 0

        ' Calculate total current balance for each bucket
        Dim BucketData As Variant
        For Each BucketData In BucketDict.Item(BucketRange)
            totalCurrentBalance = totalCurrentBalance + sourceWs.Cells(BucketData(0), 3).Value ' Assuming 3rd column in sourceWs is current balance
        Next BucketData

        TotalPoolBalance = TotalPoolBalance + totalCurrentBalance

        ' Output the total current balance for the bucket
        outputWs.Cells(rowCounter, 1).Value = "'" & BucketRange
        outputWs.Cells(rowCounter, 2).Value = totalCurrentBalance
        outputWs.Cells(rowCounter, 4).Value = BucketDict.Item(BucketRange).Count
        rowCounter = rowCounter + 1
    Next BucketRange

    ' Output the total pool balance
    outputWs.Cells(rowCounter, 2).Value = TotalPoolBalance

    ' AutoFit columns for readability
    outputWs.Columns.AutoFit
End Sub

Sub OutputBucketsAndCreateCharts(sourceWs As Worksheet, BucketDict As Object, OutputSheetName As String)
    Dim outputWs As Worksheet
    Set outputWs = ThisWorkbook.Sheets(OutputSheetName)

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    Dim startRow As Long
    startRow = FindNextAvailableRow(outputWs)

    Dim field As Variant
    For Each field In BucketDict.Keys
        ' Output data for each field and get the range
        Dim dataRange As Range
        Set dataRange = OutputDataForField(outputWs, BucketDict(field), startRow, field)
        
        ' Create chart for the field
        CreateChartForField(outputWs, dataRange, field)

        ' Update start row for next field's data
        startRow = FindNextAvailableRow(outputWs)
    Next field

    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Function OutputDataForField(outputWs As Worksheet, fieldData As Object, startRow As Long, field As String) As Range
    ' Outputs data for a specific field and returns the range of the output
    ' fieldData is expected to be a Dictionary or Collection with bucket data
    ' ... Implementation for outputting data ...
    ' Return the range where the data was outputted
End Function

Sub CreateChartForField(outputWs As Worksheet, dataRange As Range, field As String)
    ' Create a chart based on the provided data range
    Dim chartObj As ChartObject
    Set chartObj = outputWs.ChartObjects.Add(Left:=dataRange.Left, Width:=375, Top:=dataRange.Top, Height:=225)
    With chartObj.Chart
        .ChartType = xlColumnClustered
        .SetSourceData Source:=dataRange
        .HasTitle = True
        .ChartTitle.Text = field & " Distribution"
        ' Additional formatting as needed
    End With
End Sub

Function FindNextAvailableRow(ws As Worksheet) As Long
    ' Finds the first empty row in the worksheet
    FindNextAvailableRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row + 1
End Function
