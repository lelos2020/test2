Public Sub AnalyzeCompression(ws As Worksheet, colDict As Object)

    ' Inputs from the Control tab
    Dim CPR As Double, HYShare As Double
    CPR = ThisWorkbook.Sheets("Control").Cells(1, 9).Value
    HYShare = ThisWorkbook.Sheets("Control").Cells(1, 10).Value

    If CPR <= 0 Or HYShare <= 0 Then
        MsgBox "Invalid CPR or HY Loans percentage. Please check the Control tab inputs.", vbCritical
        Exit Sub
    End If

    ' Define loan parameters
    Dim floatingLoans As Collection
    Dim currentBalance As Double, interestRateType As Double, margin As Double
    Dim isFixedToFloating As Boolean, reversionDate As Date
    Dim floatingLoan As Variant
    Dim i As Long

    ' Initialize collection
    Set floatingLoans = New Collection

    ' Loop through loans and filter floating loans and F2F loans in floating period
    For i = startRow To lastRow
        currentBalance = ws.Cells(i, colDict("AR67")).Value
        interestRateType = ws.Cells(i, colDict("AR107")).Value ' Interest Rate Type
        margin = ws.Cells(i, colDict("AR110")).Value ' Margin

        ' Identify fixed-to-floating loans currently in the floating period
        isFixedToFloating = (interestRateType = 5)
        If isFixedToFloating Then
            reversionDate = ws.Cells(i, colDict("AR121")).Value
            If DateDiff("d", reversionDate, pcd) >= 0 Then
                interestRateType = 1 ' Treat as floating
            End If
        End If

        ' Add floating loans or floating F2F loans to collection
        If interestRateType = 1 And currentBalance > 0 Then
            floatingLoans.Add Array(margin, currentBalance, i) ' Store margin, balance, row index
        End If
    Next i

    ' Sort loans by margin in descending order
    Set floatingLoans = SortFloatingLoans(floatingLoans)

    ' Apply compression logic
    Dim totalReduction As Double
    totalReduction = CPR * HYShare * totalBalance

    Dim remainingReduction As Double
    remainingReduction = totalReduction

    Dim compressionResults As Collection
    Set compressionResults = New Collection

    For Each floatingLoan In floatingLoans
        margin = floatingLoan(0)
        currentBalance = floatingLoan(1)
        i = floatingLoan(2)

        If remainingReduction > 0 Then
            Dim reduction As Double
            reduction = WorksheetFunction.Min(currentBalance, remainingReduction)
            currentBalance = currentBalance - reduction
            remainingReduction = remainingReduction - reduction
        End If

        ' Store the compressed results
        compressionResults.Add Array(margin, currentBalance, i)
    Next floatingLoan

    ' Output results to a new tab
    Call OutputCompressionResults(ws, compressionResults, totalReduction)

End Sub

Private Function SortFloatingLoans(floatingLoans As Collection) As Collection
    Dim loanArray() As Variant
    Dim i As Long, j As Long
    Dim temp As Variant
    Dim sorted As Collection

    ' Transfer collection to array for sorting
    ReDim loanArray(1 To floatingLoans.Count)
    For i = 1 To floatingLoans.Count
        loanArray(i) = floatingLoans(i)
    Next i

    ' Sort array by margin (descending)
    For i = LBound(loanArray) To UBound(loanArray) - 1
        For j = i + 1 To UBound(loanArray)
            If loanArray(i)(0) < loanArray(j)(0) Then
                temp = loanArray(i)
                loanArray(i) = loanArray(j)
                loanArray(j) = temp
            End If
        Next j
    Next i

    ' Transfer sorted array back to collection
    Set sorted = New Collection
    For i = LBound(loanArray) To UBound(loanArray)
        sorted.Add loanArray(i)
    Next i

    Set SortFloatingLoans = sorted
End Function

Private Sub OutputCompressionResults(ws As Worksheet, compressionResults As Collection, totalReduction As Double)
    Dim outputWs As Worksheet
    Dim i As Long, rowCounter As Long

    ' Create or clear the Compression tab
    On Error Resume Next
    Set outputWs = ThisWorkbook.Sheets("Compression")
    On Error GoTo 0

    If outputWs Is Nothing Then
        Set outputWs = ThisWorkbook.Sheets.Add
        outputWs.Name = "Compression"
    End If
    outputWs.Cells.Clear

    ' Write headers
    rowCounter = 1
    outputWs.Cells(rowCounter, 1).Value = "Margin"
    outputWs.Cells(rowCounter, 2).Value = "Balance After Compression"
    outputWs.Cells(rowCounter, 3).Value = "Loan Row Index"
    outputWs.Cells(rowCounter, 4).Value = "Total Reduction Applied"
    outputWs.Cells(2, 4).Value = totalReduction

    rowCounter = rowCounter + 1

    ' Write results
    Dim result As Variant
    For Each result In compressionResults
        outputWs.Cells(rowCounter, 1).Value = result(0) ' Margin
        outputWs.Cells(rowCounter, 2).Value = result(1) ' Balance After Compression
        outputWs.Cells(rowCounter, 3).Value = result(2) ' Loan Row Index
        rowCounter = rowCounter + 1
    Next result

    ' Autofit columns for readability
    outputWs.Columns.AutoFit
End Sub

------v2-------

Sub AnalyzeCompression(ws As Worksheet, colDict As Object)
    Dim compressionWs As Worksheet
    Dim loanData As Collection
    Dim cpr As Double, hyShare As Double
    Dim totalBalance As Double, totalWeightedMargin As Double
    Dim preCompressionWA As Double, postCompressionWA As Double, compression As Double
    Dim remainingReduction As Double
    Dim i As Long, rowCounter As Long
    
    ' Retrieve CPR and HY share from Control tab
    cpr = ThisWorkbook.Sheets("Control").Cells(1, 9).value
    hyShare = ThisWorkbook.Sheets("Control").Cells(1, 10).value

    ' Initialize Compression worksheet
    On Error Resume Next
    Set compressionWs = ThisWorkbook.Sheets("Compression")
    On Error GoTo 0
    If compressionWs Is Nothing Then
        Set compressionWs = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        compressionWs.Name = "Compression"
    Else
        compressionWs.Cells.Clear
    End If

    ' Initialize loan data collection
    Set loanData = New Collection
    totalBalance = 0
    totalWeightedMargin = 0

    ' Extract floating rate loans and pre-compression data
    For i = startRow To lastRow
        If ws.Rows(i).EntireRow.Hidden Then GoTo ContinueLoop

        Dim interestRateType As Double
        Dim currentBalance As Double, margin As Double
        Dim reversionDate As Date, remainingMonthsToReversion As Double

        ' Get interest rate type and loan details
        interestRateType = ws.Cells(i, colDict("AR107")).value
        currentBalance = ws.Cells(i, colDict("AR67")).value
        margin = ws.Cells(i, colDict("AR110")).value
        reversionDate = ws.Cells(i, colDict("AR121")).value
        remainingMonthsToReversion = DateDiff("m", pcd, reversionDate)

        ' Check if the loan is floating or fixed-to-floating currently in floating period
        If interestRateType = 1 Or (interestRateType = 5 And remainingMonthsToReversion <= 0) Then
            ' Add loan data to collection
            Dim loan As Variant
            loan = Array(i, currentBalance, margin) ' Store row index, balance, margin
            loanData.Add loan

            ' Calculate total balance and weighted margin for pre-compression stats
            totalBalance = totalBalance + currentBalance
            totalWeightedMargin = totalWeightedMargin + (margin * currentBalance)
        End If

ContinueLoop:
    Next i

    ' Calculate WA Margin Pre-Compression
    If totalBalance > 0 Then
        preCompressionWA = totalWeightedMargin / totalBalance
    Else
        preCompressionWA = 0
    End If

    ' Perform margin compression
    remainingReduction = cpr * hyShare * totalBalance
    For Each loan In loanData
        Dim reduction As Double
        reduction = Application.Min(remainingReduction, loan(1)) ' Reduce the loan balance by available reduction
        remainingReduction = remainingReduction - reduction
        loan(1) = loan(1) - reduction ' Update balance post-compression
    Next loan

    ' Calculate WA Margin Post-Compression
    totalBalance = 0
    totalWeightedMargin = 0
    For Each loan In loanData
        totalBalance = totalBalance + loan(1)
        totalWeightedMargin = totalWeightedMargin + (loan(2) * loan(1))
    Next loan

    If totalBalance > 0 Then
        postCompressionWA = totalWeightedMargin / totalBalance
    Else
        postCompressionWA = 0
    End If

    ' Calculate Compression
    compression = preCompressionWA - postCompressionWA

    ' Output Loan Data and Summary Stats to Compression Tab
    rowCounter = 1
    compressionWs.Cells(rowCounter, 1).value = "Loan Data Pre-Compression"
    rowCounter = rowCounter + 1
    compressionWs.Cells(rowCounter, 1).value = "Row Index"
    compressionWs.Cells(rowCounter, 2).value = "Loan Balance"
    compressionWs.Cells(rowCounter, 3).value = "Margin"

    For Each loan In loanData
        rowCounter = rowCounter + 1
        compressionWs.Cells(rowCounter, 1).value = loan(0) ' Row index
        compressionWs.Cells(rowCounter, 2).value = loan(1) ' Loan balance
        compressionWs.Cells(rowCounter, 3).value = loan(2) ' Margin
    Next loan

    ' Output Summary Stats
    rowCounter = rowCounter + 2
    compressionWs.Cells(rowCounter, 1).value = "Summary Statistics"
    compressionWs.Cells(rowCounter + 1, 1).value = "WA Margin Pre-Compression"
    compressionWs.Cells(rowCounter + 1, 2).value = preCompressionWA
    compressionWs.Cells(rowCounter + 2, 1).value = "WA Margin Post-Compression"
    compressionWs.Cells(rowCounter + 2, 2).value = postCompressionWA
    compressionWs.Cells(rowCounter + 3, 1).value = "Compression (bps)"
    compressionWs.Cells(rowCounter + 3, 2).value = compression * 100 ' Convert to basis points

    ' Format Compression Tab
    With compressionWs
        .Columns("A:C").AutoFit
        .Columns("B:C").NumberFormat = "#,##0.00"
    End With
End Sub


---------v5



Sub AnalyzeLoanData()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("LLD")
    Dim controlWs As Worksheet
    Set controlWs = ThisWorkbook.Sheets("Control")
    Dim compressionWs As Worksheet
    Dim colDict As Object
    Dim i As Long
    Dim totalPreCompressionBalance As Double
    Dim totalPostCompressionBalance As Double
    Dim waMarginPreCompression As Double
    Dim waMarginPostCompression As Double
    Dim compressionImpact As Double
    Dim cpr As Double
    Dim hyPercentage As Double
    
    ' Read CPR and HY input values from the Control tab
    cpr = controlWs.Cells(1, 9).Value
    hyPercentage = controlWs.Cells(1, 10).Value

    ' Create or clear Compression tab
    On Error Resume Next
    Set compressionWs = ThisWorkbook.Sheets("Compression")
    On Error GoTo 0
    If compressionWs Is Nothing Then
        Set compressionWs = ThisWorkbook.Sheets.Add
        compressionWs.Name = "Compression"
    Else
        compressionWs.Cells.Clear
    End If

    ' Header for compression data
    compressionWs.Cells(1, 1).Value = "Row Index"
    compressionWs.Cells(1, 2).Value = "Pre-Compression Balance"
    compressionWs.Cells(1, 3).Value = "Pre-Compression Margin"
    compressionWs.Cells(1, 4).Value = "Post-Compression Balance"
    compressionWs.Cells(1, 5).Value = "Post-Compression Margin"

    ' Get field mappings
    Set colDict = GetColumnNumbersByFieldCodes(ws, Array("AR67", "AR110", "AR107"))
    Dim marginCol As Integer, balanceCol As Integer, rateTypeCol As Integer
    balanceCol = colDict("AR67")
    marginCol = colDict("AR110")
    rateTypeCol = colDict("AR107")

    Dim loanData() As Variant
    Dim floatingLoans() As Variant
    Dim floatingIndex As Long
    Dim currentRow As Long
    Dim preCompressionBalance As Double
    Dim preCompressionMargin As Double

    ' Store loan data in an array for processing
    loanData = ws.Range(ws.Cells(2, 1), ws.Cells(ws.UsedRange.Rows.Count, ws.UsedRange.Columns.Count)).Value
    ReDim floatingLoans(1 To UBound(loanData, 1), 1 To 3)

    ' Extract floating and Fixed-to-Floating loans in the floating period
    floatingIndex = 1
    For i = 1 To UBound(loanData, 1)
        If loanData(i, rateTypeCol) = 1 Or (loanData(i, rateTypeCol) = 5 And IsInFloatingPeriod(ws, i, colDict)) Then
            floatingLoans(floatingIndex, 1) = i
            floatingLoans(floatingIndex, 2) = loanData(i, balanceCol)
            floatingLoans(floatingIndex, 3) = loanData(i, marginCol)
            floatingIndex = floatingIndex + 1
        End If
    Next i
    ReDim Preserve floatingLoans(1 To floatingIndex - 1, 1 To 3)

    ' Sort floating loans by margin in descending order
    Call SortArrayDescendingByColumn(floatingLoans, 3)

    ' Calculate pre-compression WA margin
    totalPreCompressionBalance = 0
    preCompressionBalance = 0
    preCompressionMargin = 0
    For i = LBound(floatingLoans, 1) To UBound(floatingLoans, 1)
        preCompressionBalance = preCompressionBalance + floatingLoans(i, 2)
        preCompressionMargin = preCompressionMargin + (floatingLoans(i, 2) * floatingLoans(i, 3))
    Next i
    waMarginPreCompression = preCompressionMargin / preCompressionBalance

    ' Apply compression logic
    Dim compressibleBalance As Double
    compressibleBalance = cpr * hyPercentage * preCompressionBalance
    Dim remainingBalance As Double
    remainingBalance = preCompressionBalance - compressibleBalance

    totalPostCompressionBalance = 0
    Dim postCompressionMargin As Double
    Dim adjustedBalance As Double

    For i = LBound(floatingLoans, 1) To UBound(floatingLoans, 1)
        Dim loanBalance As Double, loanMargin As Double
        loanBalance = floatingLoans(i, 2)
        loanMargin = floatingLoans(i, 3)

        If compressibleBalance > 0 Then
            If compressibleBalance >= loanBalance Then
                ' Fully prepaid
                compressibleBalance = compressibleBalance - loanBalance
                loanBalance = 0
            Else
                ' Partially prepaid
                loanBalance = loanBalance - compressibleBalance
                compressibleBalance = 0
            End If
        End If

        ' Update totals and margin
        postCompressionMargin = postCompressionMargin + (loanBalance * loanMargin)
        totalPostCompressionBalance = totalPostCompressionBalance + loanBalance

        ' Write to Compression tab
        currentRow = i + 1
        compressionWs.Cells(currentRow, 1).Value = floatingLoans(i, 1)
        compressionWs.Cells(currentRow, 2).Value = floatingLoans(i, 2)
        compressionWs.Cells(currentRow, 3).Value = floatingLoans(i, 3)
        compressionWs.Cells(currentRow, 4).Value = loanBalance
        compressionWs.Cells(currentRow, 5).Value = loanMargin
    Next i

    ' Calculate WA post-compression margin
    waMarginPostCompression = postCompressionMargin / totalPostCompressionBalance
    compressionImpact = waMarginPreCompression - waMarginPostCompression

    ' Write summary statistics
    Dim summaryStart As Integer
    summaryStart = UBound(floatingLoans, 1) + 3
    compressionWs.Cells(summaryStart, 7).Value = "Summary Statistics"
    compressionWs.Cells(summaryStart + 1, 7).Value = "WA Margin Pre-Compression"
    compressionWs.Cells(summaryStart + 1, 8).Value = waMarginPreCompression
    compressionWs.Cells(summaryStart + 2, 7).Value = "WA Margin Post-Compression"
    compressionWs.Cells(summaryStart + 2, 8).Value = waMarginPostCompression
    compressionWs.Cells(summaryStart + 3, 7).Value = "Compression Impact"
    compressionWs.Cells(summaryStart + 3, 8).Value = compressionImpact

    MsgBox "Compression analysis complete.", vbInformation
End Sub

' Helper Functions
Function IsInFloatingPeriod(ws As Worksheet, row As Long, colDict As Object) As Boolean
    Dim reversionDate As Date
    reversionDate = ws.Cells(row, colDict("AR121")).Value
    IsInFloatingPeriod = (reversionDate <= pcd And reversionDate <> 0)
End Function

Sub SortArrayDescendingByColumn(ByRef dataArray As Variant, sortColumn As Long)
    Dim i As Long, j As Long
    Dim temp As Variant

    For i = LBound(dataArray, 1) To UBound(dataArray, 1) - 1
        For j = i + 1 To UBound(dataArray, 1)
            If dataArray(i, sortColumn) < dataArray(j, sortColumn) Then
                temp = dataArray(i, 1 To UBound(dataArray, 2))
                dataArray(i, 1 To UBound(dataArray, 2)) = dataArray(j, 1 To UBound(dataArray, 2))
                dataArray(j, 1 To UBound(dataArray, 2)) = temp
            End If
        Next j
    Next i
End Sub
