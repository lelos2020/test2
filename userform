To implement a ComboBox and related functionality in an Excel VBA UserForm for managing swap-related settings and interest rate types for loan amortization, follow these steps to create and code the interface:

### Step 1: Design the UserForm

1. **Add ComboBox for Swap Flag**:
   - Name: `cmbSwap`
   - Properties: Set `ListFillRange` to have "Yes", "No" or manually add these items in the `UserForm_Initialize` procedure.

2. **Add TextBox for Swap Rate**:
   - Name: `txtSwapRate`
   - Properties: Initially set `Visible` to `False`.

3. **Add ComboBox for Interest Rate Type**:
   - Name: `cmbInterestRateType`
   - Properties: Populate with options like "Current Interest Rate" or "Index Plus Margin".

4. **Add Labels** for clarity:
   - For `cmbSwap`: "Swap"
   - For `txtSwapRate`: "Swap Rate"
   - For `cmbInterestRateType`: "Interest Rate Type"

5. **Command Buttons** for actions:
   - Save, Cancel, etc.

### Step 2: Populate and Manage Visibility

In the `UserForm_Initialize` subroutine, populate the ComboBoxes and set the initial visibility based on the swap setting.

```vba
Private Sub UserForm_Initialize()
    ' Populate Swap ComboBox
    With cmbSwap
        .AddItem "Yes"
        .AddItem "No"
    End With
    
    ' Populate Interest Rate Type ComboBox
    With cmbInterestRateType
        .AddItem "Current Interest Rate"
        .AddItem "Index Plus Margin"
    End With
    
    ' Assume Swap flag and Swap Rate are stored in cells A1 and A2 respectively
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Control")
    cmbSwap.Value = ws.Range("A1").Value
    txtSwapRate.Value = ws.Range("A2").Value
    cmbInterestRateType.Value = ws.Range("A3").Value

    ' Manage Swap Rate visibility
    txtSwapRate.Visible = (cmbSwap.Value = "Yes")
End Sub
```

### Step 3: Code to Toggle Visibility of the Swap Rate Entry

Add event handler code to the `cmbSwap` ComboBox to toggle the visibility of the `txtSwapRate` TextBox based on the userâ€™s selection.

```vba
Private Sub cmbSwap_Change()
    txtSwapRate.Visible = (cmbSwap.Value = "Yes")
End Sub
```

### Step 4: Saving the Data

When the user presses the "Save" button, you'll want to save these settings back to the worksheet.

```vba
Private Sub btnSave_Click()
    ' Assuming swap settings are stored in Control sheet, cells A1, A2, A3
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Control")
    ws.Range("A1").Value = cmbSwap.Value
    ws.Range("A2").Value = IIf(txtSwapRate.Visible, txtSwapRate.Value, "")
    ws.Range("A3").Value = cmbInterestRateType.Value

    ' Hide the form
    Me.Hide
End Sub
```

### Step 5: Add Error Handling and Data Validation

Ensure that your code includes validation, especially for the swap rate input, to handle cases where input might be invalid.

```vba
Private Sub btnSave_Click()
    ' Validate swap rate input if visible
    If txtSwapRate.Visible And Not IsNumeric(txtSwapRate.Value) Then
        MsgBox "Please enter a valid swap rate.", vbExclamation
        Exit Sub
    End If

    ' Save logic as above...
End Sub
```

### Final Thoughts

By following these steps, you create a UserForm in Excel VBA that dynamically adjusts its input fields based on user selections, providing a responsive and intuitive interface for managing financial data settings. This setup enhances user experience and data integrity in financial modeling or similar applications.